
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.camposeco.proyecto1_compiladores.analizador.parser;

import java.util.*;
import java.io.*;
import java.lang.*;
import java_cup.runtime.*;
import com.camposeco.proyecto1_compiladores.analizador.lexer.parteLexicaJava;
import java.util.ArrayList;
import com.camposeco.proyecto1_compiladores.objetos.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoParserJava extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoParserJava() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoParserJava(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoParserJava(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\361\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\002\003\000\002\002\004\000\002\050\003" +
    "\000\002\050\004\000\002\055\003\000\002\055\004\000" +
    "\002\055\003\000\002\055\004\000\002\055\003\000\002" +
    "\055\004\000\002\055\003\000\002\055\004\000\002\055" +
    "\003\000\002\055\004\000\002\055\003\000\002\055\004" +
    "\000\002\054\003\000\002\054\004\000\002\054\003\000" +
    "\002\054\004\000\002\054\003\000\002\054\004\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\046\010\000\002\046\007\000\002\073\010" +
    "\000\002\073\011\000\002\074\012\000\002\074\011\000" +
    "\002\074\010\000\002\074\011\000\002\052\013\000\002" +
    "\052\012\000\002\052\011\000\002\052\012\000\002\052" +
    "\012\000\002\052\011\000\002\056\004\000\002\056\006" +
    "\000\002\053\014\000\002\053\013\000\002\053\013\000" +
    "\002\053\012\000\002\053\013\000\002\053\012\000\002" +
    "\060\005\000\002\060\005\000\002\060\005\000\002\060" +
    "\005\000\002\060\005\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\032\003\000\002\032\004\000\002\032\003\000\002" +
    "\075\003\000\002\075\004\000\002\075\003\000\002\075" +
    "\004\000\002\075\003\000\002\075\004\000\002\033\011" +
    "\000\002\033\010\000\002\034\006\000\002\034\005\000" +
    "\002\035\003\000\002\035\005\000\002\035\005\000\002" +
    "\035\003\000\002\035\005\000\002\035\005\000\002\036" +
    "\005\000\002\036\005\000\002\036\005\000\002\036\005" +
    "\000\002\036\005\000\002\036\005\000\002\036\005\000" +
    "\002\036\005\000\002\036\005\000\002\036\005\000\002" +
    "\036\005\000\002\036\005\000\002\037\003\000\002\037" +
    "\003\000\002\041\003\000\002\041\005\000\002\041\005" +
    "\000\002\041\006\000\002\041\006\000\002\041\004\000" +
    "\002\041\006\000\002\041\006\000\002\041\007\000\002" +
    "\041\007\000\002\040\003\000\002\040\003\000\002\061" +
    "\003\000\002\061\003\000\002\061\003\000\002\072\003" +
    "\000\002\072\003\000\002\030\003\000\002\030\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\023\006\000\002\024" +
    "\006\000\002\025\006\000\002\026\006\000\002\027\011" +
    "\000\002\027\012\000\002\027\006\000\002\031\004\000" +
    "\002\031\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\004\007\000\002\004\005\000\002\004\007" +
    "\000\002\004\011\000\002\012\003\000\002\012\005\000" +
    "\002\012\005\000\002\012\007\000\002\005\007\000\002" +
    "\005\005\000\002\005\007\000\002\005\011\000\002\014" +
    "\003\000\002\014\005\000\002\014\005\000\002\014\007" +
    "\000\002\015\003\000\002\015\003\000\002\006\007\000" +
    "\002\006\005\000\002\006\007\000\002\006\011\000\002" +
    "\016\003\000\002\016\005\000\002\016\005\000\002\016" +
    "\007\000\002\007\007\000\002\007\005\000\002\007\007" +
    "\000\002\007\011\000\002\017\003\000\002\017\005\000" +
    "\002\017\005\000\002\017\007\000\002\010\007\000\002" +
    "\010\005\000\002\010\007\000\002\010\011\000\002\020" +
    "\003\000\002\020\005\000\002\020\007\000\002\020\005" +
    "\000\002\011\012\000\002\011\013\000\002\011\007\000" +
    "\002\011\005\000\002\011\007\000\002\011\011\000\002" +
    "\011\014\000\002\011\015\000\002\076\003\000\002\076" +
    "\010\000\002\076\012\000\002\076\011\000\002\076\013" +
    "\000\002\076\005\000\002\076\007\000\002\076\005\000" +
    "\002\042\005\000\002\042\006\000\002\042\007\000\002" +
    "\043\004\000\002\043\005\000\002\043\004\000\002\044" +
    "\005\000\002\044\007\000\002\044\007\000\002\044\011" +
    "\000\002\044\003\000\002\044\005\000\002\045\005\000" +
    "\002\045\007\000\002\045\007\000\002\045\011\000\002" +
    "\045\003\000\002\045\005\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\047\005\000\002\047\003\000\002\071\003\000" +
    "\002\071\003\000\002\071\003\000\002\062\003\000\002" +
    "\062\003\000\002\062\003\000\002\062\003\000\002\063" +
    "\003\000\002\063\003\000\002\064\022\000\002\064\024" +
    "\000\002\064\023\000\002\064\025\000\002\065\010\000" +
    "\002\065\011\000\002\067\012\000\002\067\013\000\002" +
    "\070\007\000\002\070\007\000\002\070\007\000\002\070" +
    "\010\000\002\070\010\000\002\070\010\000\002\066\015" +
    "\000\002\066\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u023e\000\020\003\013\037\004\047\014\050\006\051" +
    "\010\052\016\061\012\001\002\000\004\070\u0236\001\002" +
    "\000\022\002\001\003\013\037\004\047\014\050\006\051" +
    "\010\052\016\061\012\001\002\000\024\040\uffe8\061\uffe8" +
    "\062\uffe8\070\uffe8\073\uffe8\074\uffe8\075\uffe8\076\uffe8\077" +
    "\uffe8\001\002\000\004\002\ufffe\001\002\000\024\040\uffe6" +
    "\061\uffe6\062\uffe6\070\uffe6\073\uffe6\074\uffe6\075\uffe6\076" +
    "\uffe6\077\uffe6\001\002\000\004\061\u0230\001\002\000\004" +
    "\070\023\001\002\000\020\003\013\037\004\047\014\050" +
    "\006\051\010\052\016\061\012\001\002\000\024\040\uffe7" +
    "\061\uffe7\062\uffe7\070\uffe7\073\uffe7\074\uffe7\075\uffe7\076" +
    "\uffe7\077\uffe7\001\002\000\016\002\ufffc\047\014\050\006" +
    "\051\010\052\016\061\012\001\002\000\024\040\uffe5\061" +
    "\uffe5\062\uffe5\070\uffe5\073\uffe5\074\uffe5\075\uffe5\076\uffe5" +
    "\077\uffe5\001\002\000\004\002\020\001\002\000\004\002" +
    "\000\001\002\000\004\002\ufffb\001\002\000\004\002\ufffd" +
    "\001\002\000\004\016\024\001\002\000\044\040\071\041" +
    "\043\043\033\044\062\045\074\046\056\047\014\050\006" +
    "\051\010\052\016\062\052\070\046\073\027\074\070\075" +
    "\051\076\037\077\030\001\002\000\004\017\u022f\001\002" +
    "\000\046\017\ufffa\040\071\041\043\043\033\044\062\045" +
    "\074\046\056\047\014\050\006\051\010\052\016\062\052" +
    "\070\046\073\027\074\070\075\051\076\037\077\030\001" +
    "\002\000\004\070\u022c\001\002\000\004\070\u022a\001\002" +
    "\000\046\017\ufff4\040\071\041\043\043\033\044\062\045" +
    "\074\046\056\047\014\050\006\051\010\052\016\062\052" +
    "\070\046\073\027\074\070\075\051\076\037\077\030\001" +
    "\002\000\052\017\uff8f\040\uff8f\041\uff8f\043\uff8f\044\uff8f" +
    "\045\uff8f\046\uff8f\047\uff8f\050\uff8f\051\uff8f\052\uff8f\053" +
    "\uff8f\054\uff8f\062\uff8f\070\uff8f\073\uff8f\074\uff8f\075\uff8f" +
    "\076\uff8f\077\uff8f\001\002\000\004\020\u01f3\001\002\000" +
    "\052\017\uff80\040\uff80\041\uff80\043\uff80\044\uff80\045\uff80" +
    "\046\uff80\047\uff80\050\uff80\051\uff80\052\uff80\053\uff80\054" +
    "\uff80\062\uff80\070\uff80\073\uff80\074\uff80\075\uff80\076\uff80" +
    "\077\uff80\001\002\000\022\040\071\062\u01ca\070\u01cb\073" +
    "\027\074\070\075\051\076\037\077\030\001\002\000\052" +
    "\017\uff7f\040\uff7f\041\uff7f\043\uff7f\044\uff7f\045\uff7f\046" +
    "\uff7f\047\uff7f\050\uff7f\051\uff7f\052\uff7f\053\uff7f\054\uff7f" +
    "\062\uff7f\070\uff7f\073\uff7f\074\uff7f\075\uff7f\076\uff7f\077" +
    "\uff7f\001\002\000\004\070\u01c8\001\002\000\016\021\u01b5" +
    "\073\344\074\345\075\343\076\341\077\337\001\002\000" +
    "\052\017\uff7e\040\uff7e\041\uff7e\043\uff7e\044\uff7e\045\uff7e" +
    "\046\uff7e\047\uff7e\050\uff7e\051\uff7e\052\uff7e\053\uff7e\054" +
    "\uff7e\062\uff7e\070\uff7e\073\uff7e\074\uff7e\075\uff7e\076\uff7e" +
    "\077\uff7e\001\002\000\052\017\uff8e\040\uff8e\041\uff8e\043" +
    "\uff8e\044\uff8e\045\uff8e\046\uff8e\047\uff8e\050\uff8e\051\uff8e" +
    "\052\uff8e\053\uff8e\054\uff8e\062\uff8e\070\uff8e\073\uff8e\074" +
    "\uff8e\075\uff8e\076\uff8e\077\uff8e\001\002\000\004\020\u01ae" +
    "\001\002\000\052\017\uff8d\040\uff8d\041\uff8d\043\uff8d\044" +
    "\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d\051\uff8d\052\uff8d" +
    "\053\uff8d\054\uff8d\062\uff8d\070\uff8d\073\uff8d\074\uff8d\075" +
    "\uff8d\076\uff8d\077\uff8d\001\002\000\052\017\uff8c\040\uff8c" +
    "\041\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c\050" +
    "\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c\062\uff8c\070\uff8c" +
    "\073\uff8c\074\uff8c\075\uff8c\076\uff8c\077\uff8c\001\002\000" +
    "\006\004\316\020\u01a0\001\002\000\050\017\uff91\040\uff91" +
    "\041\uff91\043\uff91\044\uff91\045\uff91\046\uff91\047\uff91\050" +
    "\uff91\051\uff91\052\uff91\053\uff91\062\uff91\070\uff91\073\uff91" +
    "\074\uff91\075\uff91\076\uff91\077\uff91\001\002\000\052\017" +
    "\uff7d\040\uff7d\041\uff7d\043\uff7d\044\uff7d\045\uff7d\046\uff7d" +
    "\047\uff7d\050\uff7d\051\uff7d\052\uff7d\053\uff7d\054\uff7d\062" +
    "\uff7d\070\uff7d\073\uff7d\074\uff7d\075\uff7d\076\uff7d\077\uff7d" +
    "\001\002\000\004\070\u019e\001\002\000\004\070\u018a\001" +
    "\002\000\052\017\uff83\040\uff83\041\uff83\043\uff83\044\uff83" +
    "\045\uff83\046\uff83\047\uff83\050\uff83\051\uff83\052\uff83\053" +
    "\uff83\054\uff83\062\uff83\070\uff83\073\uff83\074\uff83\075\uff83" +
    "\076\uff83\077\uff83\001\002\000\052\017\uff27\040\uff27\041" +
    "\uff27\043\uff27\044\uff27\045\uff27\046\uff27\047\uff27\050\uff27" +
    "\051\uff27\052\uff27\053\uff27\054\uff27\062\uff27\070\uff27\073" +
    "\uff27\074\uff27\075\uff27\076\uff27\077\uff27\001\002\000\052" +
    "\017\uff28\040\uff28\041\uff28\043\uff28\044\uff28\045\uff28\046" +
    "\uff28\047\uff28\050\uff28\051\uff28\052\uff28\053\uff28\054\uff28" +
    "\062\uff28\070\uff28\073\uff28\074\uff28\075\uff28\076\uff28\077" +
    "\uff28\001\002\000\004\020\u0169\001\002\000\046\017\ufff8" +
    "\040\071\041\043\043\033\044\062\045\074\046\056\047" +
    "\014\050\006\051\010\052\016\062\052\070\046\073\027" +
    "\074\070\075\051\076\037\077\030\001\002\000\054\017" +
    "\uffc4\040\uffc4\041\uffc4\042\u0162\043\uffc4\044\uffc4\045\uffc4" +
    "\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054" +
    "\uffc4\062\uffc4\070\uffc4\073\uffc4\074\uffc4\075\uffc4\076\uffc4" +
    "\077\uffc4\001\002\000\052\017\uffc2\040\uffc2\041\uffc2\043" +
    "\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2" +
    "\052\uffc2\053\uffc2\054\uffc2\062\uffc2\070\uffc2\073\uffc2\074" +
    "\uffc2\075\uffc2\076\uffc2\077\uffc2\001\002\000\004\020\u015b" +
    "\001\002\000\052\017\uff29\040\uff29\041\uff29\043\uff29\044" +
    "\uff29\045\uff29\046\uff29\047\uff29\050\uff29\051\uff29\052\uff29" +
    "\053\uff29\054\uff29\062\uff29\070\uff29\073\uff29\074\uff29\075" +
    "\uff29\076\uff29\077\uff29\001\002\000\052\017\uff81\040\uff81" +
    "\041\uff81\043\uff81\044\uff81\045\uff81\046\uff81\047\uff81\050" +
    "\uff81\051\uff81\052\uff81\053\uff81\054\uff81\062\uff81\070\uff81" +
    "\073\uff81\074\uff81\075\uff81\076\uff81\077\uff81\001\002\000" +
    "\046\017\ufff2\040\071\041\043\043\033\044\062\045\074" +
    "\046\056\047\014\050\006\051\010\052\016\062\052\070" +
    "\046\073\027\074\070\075\051\076\037\077\030\001\002" +
    "\000\050\017\uff92\040\uff92\041\uff92\043\uff92\044\uff92\045" +
    "\uff92\046\uff92\047\uff92\050\uff92\051\uff92\052\uff92\053\uff92" +
    "\062\uff92\070\uff92\073\uff92\074\uff92\075\uff92\076\uff92\077" +
    "\uff92\001\002\000\052\017\uff82\040\uff82\041\uff82\043\uff82" +
    "\044\uff82\045\uff82\046\uff82\047\uff82\050\uff82\051\uff82\052" +
    "\uff82\053\uff82\054\uff82\062\uff82\070\uff82\073\uff82\074\uff82" +
    "\075\uff82\076\uff82\077\uff82\001\002\000\004\070\u0158\001" +
    "\002\000\004\070\u012a\001\002\000\046\017\ufff6\040\071" +
    "\041\043\043\033\044\062\045\074\046\056\047\014\050" +
    "\006\051\010\052\016\062\052\070\046\073\027\074\070" +
    "\075\051\076\037\077\030\001\002\000\052\017\uff90\040" +
    "\uff90\041\uff90\043\uff90\044\uff90\045\uff90\046\uff90\047\uff90" +
    "\050\uff90\051\uff90\052\uff90\053\uff90\054\uff90\062\uff90\070" +
    "\uff90\073\uff90\074\uff90\075\uff90\076\uff90\077\uff90\001\002" +
    "\000\004\016\077\001\002\000\046\017\ufff0\040\071\041" +
    "\043\043\033\044\062\045\074\046\056\047\014\050\006" +
    "\051\010\052\016\062\052\070\046\073\027\074\070\075" +
    "\051\076\037\077\030\001\002\000\004\017\uffef\001\002" +
    "\000\044\017\103\040\071\041\043\043\033\044\062\045" +
    "\074\046\056\047\014\050\006\051\010\052\016\070\106" +
    "\073\101\074\112\075\107\076\105\077\102\001\002\000" +
    "\046\017\uffc1\040\071\041\043\043\033\044\062\045\074" +
    "\046\056\047\014\050\006\051\010\052\016\053\uffc1\070" +
    "\106\073\101\074\112\075\107\076\105\077\102\001\002" +
    "\000\004\070\u0116\001\002\000\004\070\u0104\001\002\000" +
    "\004\044\377\001\002\000\016\040\071\073\101\074\112" +
    "\075\107\076\105\077\102\001\002\000\004\070\354\001" +
    "\002\000\004\004\316\001\002\000\004\070\274\001\002" +
    "\000\004\017\142\001\002\000\046\017\uffbf\040\071\041" +
    "\043\043\033\044\062\045\074\046\056\047\014\050\006" +
    "\051\010\052\016\053\uffbf\070\106\073\101\074\112\075" +
    "\107\076\105\077\102\001\002\000\004\070\115\001\002" +
    "\000\046\017\uffbd\040\071\041\043\043\033\044\062\045" +
    "\074\046\056\047\014\050\006\051\010\052\016\053\uffbd" +
    "\070\106\073\101\074\112\075\107\076\105\077\102\001" +
    "\002\000\006\017\uffbc\053\uffbc\001\002\000\010\004\117" +
    "\005\116\010\120\001\002\000\004\070\126\001\002\000" +
    "\006\057\123\060\122\001\002\000\052\017\uff73\040\uff73" +
    "\041\uff73\043\uff73\044\uff73\045\uff73\046\uff73\047\uff73\050" +
    "\uff73\051\uff73\052\uff73\053\uff73\054\uff73\062\uff73\070\uff73" +
    "\073\uff73\074\uff73\075\uff73\076\uff73\077\uff73\001\002\000" +
    "\006\005\124\010\125\001\002\000\020\005\uff6c\010\uff6c" +
    "\021\uff6c\026\uff6c\027\uff6c\034\uff6c\035\uff6c\001\002\000" +
    "\020\005\uff6b\010\uff6b\021\uff6b\026\uff6b\027\uff6b\034\uff6b" +
    "\035\uff6b\001\002\000\004\070\126\001\002\000\052\017" +
    "\uff74\040\uff74\041\uff74\043\uff74\044\uff74\045\uff74\046\uff74" +
    "\047\uff74\050\uff74\051\uff74\052\uff74\053\uff74\054\uff74\062" +
    "\uff74\070\uff74\073\uff74\074\uff74\075\uff74\076\uff74\077\uff74" +
    "\001\002\000\010\004\132\005\131\010\uff70\001\002\000" +
    "\004\010\130\001\002\000\052\017\uff71\040\uff71\041\uff71" +
    "\043\uff71\044\uff71\045\uff71\046\uff71\047\uff71\050\uff71\051" +
    "\uff71\052\uff71\053\uff71\054\uff71\062\uff71\070\uff71\073\uff71" +
    "\074\uff71\075\uff71\076\uff71\077\uff71\001\002\000\004\070" +
    "\126\001\002\000\006\057\123\060\122\001\002\000\006" +
    "\005\134\010\uff6f\001\002\000\004\070\126\001\002\000" +
    "\004\010\uff6d\001\002\000\004\010\uff6e\001\002\000\004" +
    "\010\140\001\002\000\052\017\uff72\040\uff72\041\uff72\043" +
    "\uff72\044\uff72\045\uff72\046\uff72\047\uff72\050\uff72\051\uff72" +
    "\052\uff72\053\uff72\054\uff72\062\uff72\070\uff72\073\uff72\074" +
    "\uff72\075\uff72\076\uff72\077\uff72\001\002\000\006\017\uffbe" +
    "\053\uffbe\001\002\000\004\044\143\001\002\000\004\020" +
    "\144\001\002\000\022\020\160\036\157\057\123\060\122" +
    "\070\155\071\146\072\151\100\147\001\002\000\042\005" +
    "\uff32\010\uff32\011\200\012\173\013\177\014\172\015\174" +
    "\021\uff32\024\uff32\025\uff32\026\uff32\027\uff32\030\uff32\031" +
    "\uff32\034\uff32\035\uff32\001\002\000\006\026\266\027\267" +
    "\001\002\000\044\005\uff2a\006\264\010\uff2a\011\uff2a\012" +
    "\uff2a\013\uff2a\014\uff2a\015\uff2a\021\uff2a\024\uff2a\025\uff2a" +
    "\026\uff2a\027\uff2a\030\uff2a\031\uff2a\034\uff2a\035\uff2a\001" +
    "\002\000\004\021\262\001\002\000\006\026\256\027\257" +
    "\001\002\000\012\024\245\025\244\030\246\031\247\001" +
    "\002\000\010\021\uffb4\034\240\035\241\001\002\000\014" +
    "\021\uffa3\026\225\027\226\034\uffa3\035\uffa3\001\002\000" +
    "\024\021\uff99\024\uffa4\025\uffa4\026\uff99\027\uff99\030\uffa4" +
    "\031\uffa4\034\uff99\035\uff99\001\002\000\010\021\uffb7\034" +
    "\221\035\222\001\002\000\010\057\123\060\122\070\207" +
    "\001\002\000\004\100\147\001\002\000\016\024\uffa5\025" +
    "\uffa5\026\163\027\164\030\uffa5\031\uffa5\001\002\000\014" +
    "\021\uff98\026\uff98\027\uff98\034\uff98\035\uff98\001\002\000" +
    "\010\020\160\070\170\100\147\001\002\000\010\020\160" +
    "\070\166\100\147\001\002\000\010\021\uffae\034\uffae\035" +
    "\uffae\001\002\000\010\021\uffac\034\uffac\035\uffac\001\002" +
    "\000\010\021\uffaf\034\uffaf\035\uffaf\001\002\000\010\021" +
    "\uffad\034\uffad\035\uffad\001\002\000\016\011\200\012\173" +
    "\013\177\014\172\015\174\021\175\001\002\000\006\020" +
    "\uff2e\100\uff2e\001\002\000\006\020\uff30\100\uff30\001\002" +
    "\000\006\020\uff2c\100\uff2c\001\002\000\042\005\uff36\010" +
    "\uff36\011\200\012\173\013\177\014\172\015\174\021\uff36" +
    "\024\uff36\025\uff36\026\uff36\027\uff36\030\uff36\031\uff36\034" +
    "\uff36\035\uff36\001\002\000\006\020\160\100\147\001\002" +
    "\000\006\020\uff2f\100\uff2f\001\002\000\006\020\uff2d\100" +
    "\uff2d\001\002\000\004\021\202\001\002\000\042\005\uff34" +
    "\010\uff34\011\200\012\173\013\177\014\172\015\174\021" +
    "\uff34\024\uff34\025\uff34\026\uff34\027\uff34\030\uff34\031\uff34" +
    "\034\uff34\035\uff34\001\002\000\006\020\160\100\147\001" +
    "\002\000\030\005\uff33\010\uff33\021\uff33\024\uff33\025\uff33" +
    "\026\uff33\027\uff33\030\uff33\031\uff33\034\uff33\035\uff33\001" +
    "\002\000\006\020\160\100\147\001\002\000\030\005\uff35" +
    "\010\uff35\021\uff35\024\uff35\025\uff35\026\uff35\027\uff35\030" +
    "\uff35\031\uff35\034\uff35\035\uff35\001\002\000\014\021\uff99" +
    "\026\uff99\027\uff99\034\uff99\035\uff99\001\002\000\014\021" +
    "\uff9e\026\211\027\212\034\uff9e\035\uff9e\001\002\000\012" +
    "\036\216\057\123\060\122\070\207\001\002\000\012\036" +
    "\213\057\123\060\122\070\207\001\002\000\010\057\123" +
    "\060\122\070\207\001\002\000\010\021\uff9c\034\uff9c\035" +
    "\uff9c\001\002\000\010\021\uff9a\034\uff9a\035\uff9a\001\002" +
    "\000\010\057\123\060\122\070\207\001\002\000\010\021" +
    "\uff9d\034\uff9d\035\uff9d\001\002\000\010\021\uff9b\034\uff9b" +
    "\035\uff9b\001\002\000\022\020\160\036\157\057\123\060" +
    "\122\070\155\071\146\072\151\100\147\001\002\000\022" +
    "\020\160\036\157\057\123\060\122\070\155\071\146\072" +
    "\151\100\147\001\002\000\004\021\uffb6\001\002\000\004" +
    "\021\uffb5\001\002\000\014\036\235\057\123\060\122\071" +
    "\233\072\227\001\002\000\014\036\231\057\123\060\122" +
    "\071\233\072\227\001\002\000\010\021\uff96\034\uff96\035" +
    "\uff96\001\002\000\010\021\uff95\034\uff95\035\uff95\001\002" +
    "\000\006\057\123\060\122\001\002\000\010\021\uffa1\034" +
    "\uffa1\035\uffa1\001\002\000\010\021\uff97\034\uff97\035\uff97" +
    "\001\002\000\010\021\uff9f\034\uff9f\035\uff9f\001\002\000" +
    "\006\057\123\060\122\001\002\000\010\021\uffa2\034\uffa2" +
    "\035\uffa2\001\002\000\010\021\uffa0\034\uffa0\035\uffa0\001" +
    "\002\000\022\020\160\036\157\057\123\060\122\070\155" +
    "\071\146\072\151\100\147\001\002\000\022\020\160\036" +
    "\157\057\123\060\122\070\155\071\146\072\151\100\147" +
    "\001\002\000\004\021\uffb3\001\002\000\004\021\uffb2\001" +
    "\002\000\010\020\160\070\251\100\147\001\002\000\010" +
    "\020\160\070\251\100\147\001\002\000\010\020\160\070" +
    "\251\100\147\001\002\000\010\020\160\070\251\100\147" +
    "\001\002\000\010\021\uffa5\034\uffa5\035\uffa5\001\002\000" +
    "\010\021\uffa4\034\uffa4\035\uffa4\001\002\000\010\021\uffa6" +
    "\034\uffa6\035\uffa6\001\002\000\010\021\uffa7\034\uffa7\035" +
    "\uffa7\001\002\000\010\021\uffb1\034\uffb1\035\uffb1\001\002" +
    "\000\010\021\uffb0\034\uffb0\035\uffb0\001\002\000\004\070" +
    "\261\001\002\000\004\070\260\001\002\000\010\021\uffa8" +
    "\034\uffa8\035\uffa8\001\002\000\010\021\uffa9\034\uffa9\035" +
    "\uffa9\001\002\000\004\010\263\001\002\000\052\017\uff19" +
    "\040\uff19\041\uff19\043\uff19\044\uff19\045\uff19\046\uff19\047" +
    "\uff19\050\uff19\051\uff19\052\uff19\053\uff19\054\uff19\062\uff19" +
    "\070\uff19\073\uff19\074\uff19\075\uff19\076\uff19\077\uff19\001" +
    "\002\000\004\100\265\001\002\000\042\005\uff2b\010\uff2b" +
    "\011\uff2b\012\uff2b\013\uff2b\014\uff2b\015\uff2b\021\uff2b\024" +
    "\uff2b\025\uff2b\026\uff2b\027\uff2b\030\uff2b\031\uff2b\034\uff2b" +
    "\035\uff2b\001\002\000\004\070\271\001\002\000\004\070" +
    "\270\001\002\000\010\021\uffaa\034\uffaa\035\uffaa\001\002" +
    "\000\010\021\uffab\034\uffab\035\uffab\001\002\000\006\020" +
    "\160\100\147\001\002\000\030\005\uff31\010\uff31\021\uff31" +
    "\024\uff31\025\uff31\026\uff31\027\uff31\030\uff31\031\uff31\034" +
    "\uff31\035\uff31\001\002\000\010\004\276\005\275\010\277" +
    "\001\002\000\004\070\304\001\002\000\004\071\300\001" +
    "\002\000\052\017\uff69\040\uff69\041\uff69\043\uff69\044\uff69" +
    "\045\uff69\046\uff69\047\uff69\050\uff69\051\uff69\052\uff69\053" +
    "\uff69\054\uff69\062\uff69\070\uff69\073\uff69\074\uff69\075\uff69" +
    "\076\uff69\077\uff69\001\002\000\006\005\301\010\302\001" +
    "\002\000\004\070\304\001\002\000\052\017\uff6a\040\uff6a" +
    "\041\uff6a\043\uff6a\044\uff6a\045\uff6a\046\uff6a\047\uff6a\050" +
    "\uff6a\051\uff6a\052\uff6a\053\uff6a\054\uff6a\062\uff6a\070\uff6a" +
    "\073\uff6a\074\uff6a\075\uff6a\076\uff6a\077\uff6a\001\002\000" +
    "\004\010\313\001\002\000\010\004\306\005\305\010\uff66" +
    "\001\002\000\004\070\304\001\002\000\004\071\307\001" +
    "\002\000\006\005\310\010\uff65\001\002\000\004\070\304" +
    "\001\002\000\004\010\uff63\001\002\000\004\010\uff64\001" +
    "\002\000\052\017\uff67\040\uff67\041\uff67\043\uff67\044\uff67" +
    "\045\uff67\046\uff67\047\uff67\050\uff67\051\uff67\052\uff67\053" +
    "\uff67\054\uff67\062\uff67\070\uff67\073\uff67\074\uff67\075\uff67" +
    "\076\uff67\077\uff67\001\002\000\004\010\315\001\002\000" +
    "\052\017\uff68\040\uff68\041\uff68\043\uff68\044\uff68\045\uff68" +
    "\046\uff68\047\uff68\050\uff68\051\uff68\052\uff68\053\uff68\054" +
    "\uff68\062\uff68\070\uff68\073\uff68\074\uff68\075\uff68\076\uff68" +
    "\077\uff68\001\002\000\022\020\160\057\123\060\122\066" +
    "\320\070\322\071\317\072\321\100\147\001\002\000\004" +
    "\010\353\001\002\000\006\040\332\070\331\001\002\000" +
    "\004\010\330\001\002\000\004\010\327\001\002\000\004" +
    "\010\326\001\002\000\004\010\325\001\002\000\052\017" +
    "\uff8b\040\uff8b\041\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b" +
    "\047\uff8b\050\uff8b\051\uff8b\052\uff8b\053\uff8b\054\uff8b\062" +
    "\uff8b\070\uff8b\073\uff8b\074\uff8b\075\uff8b\076\uff8b\077\uff8b" +
    "\001\002\000\052\017\uff88\040\uff88\041\uff88\043\uff88\044" +
    "\uff88\045\uff88\046\uff88\047\uff88\050\uff88\051\uff88\052\uff88" +
    "\053\uff88\054\uff88\062\uff88\070\uff88\073\uff88\074\uff88\075" +
    "\uff88\076\uff88\077\uff88\001\002\000\052\017\uff85\040\uff85" +
    "\041\uff85\043\uff85\044\uff85\045\uff85\046\uff85\047\uff85\050" +
    "\uff85\051\uff85\052\uff85\053\uff85\054\uff85\062\uff85\070\uff85" +
    "\073\uff85\074\uff85\075\uff85\076\uff85\077\uff85\001\002\000" +
    "\052\017\uff89\040\uff89\041\uff89\043\uff89\044\uff89\045\uff89" +
    "\046\uff89\047\uff89\050\uff89\051\uff89\052\uff89\053\uff89\054" +
    "\uff89\062\uff89\070\uff89\073\uff89\074\uff89\075\uff89\076\uff89" +
    "\077\uff89\001\002\000\004\020\336\001\002\000\004\020" +
    "\333\001\002\000\004\021\334\001\002\000\004\010\335" +
    "\001\002\000\052\017\uff87\040\uff87\041\uff87\043\uff87\044" +
    "\uff87\045\uff87\046\uff87\047\uff87\050\uff87\051\uff87\052\uff87" +
    "\053\uff87\054\uff87\062\uff87\070\uff87\073\uff87\074\uff87\075" +
    "\uff87\076\uff87\077\uff87\001\002\000\014\073\344\074\345" +
    "\075\343\076\341\077\337\001\002\000\004\070\uffc5\001" +
    "\002\000\004\021\351\001\002\000\004\070\uffc6\001\002" +
    "\000\004\070\346\001\002\000\004\070\uffc7\001\002\000" +
    "\004\070\uffc9\001\002\000\004\070\uffc8\001\002\000\006" +
    "\005\347\021\uffd6\001\002\000\014\073\344\074\345\075" +
    "\343\076\341\077\337\001\002\000\004\021\uffd5\001\002" +
    "\000\004\010\352\001\002\000\052\017\uff86\040\uff86\041" +
    "\uff86\043\uff86\044\uff86\045\uff86\046\uff86\047\uff86\050\uff86" +
    "\051\uff86\052\uff86\053\uff86\054\uff86\062\uff86\070\uff86\073" +
    "\uff86\074\uff86\075\uff86\076\uff86\077\uff86\001\002\000\052" +
    "\017\uff8a\040\uff8a\041\uff8a\043\uff8a\044\uff8a\045\uff8a\046" +
    "\uff8a\047\uff8a\050\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a" +
    "\062\uff8a\070\uff8a\073\uff8a\074\uff8a\075\uff8a\076\uff8a\077" +
    "\uff8a\001\002\000\010\004\356\005\355\010\357\001\002" +
    "\000\004\070\364\001\002\000\004\072\360\001\002\000" +
    "\052\017\uff61\040\uff61\041\uff61\043\uff61\044\uff61\045\uff61" +
    "\046\uff61\047\uff61\050\uff61\051\uff61\052\uff61\053\uff61\054" +
    "\uff61\062\uff61\070\uff61\073\uff61\074\uff61\075\uff61\076\uff61" +
    "\077\uff61\001\002\000\006\005\361\010\362\001\002\000" +
    "\004\070\364\001\002\000\052\017\uff62\040\uff62\041\uff62" +
    "\043\uff62\044\uff62\045\uff62\046\uff62\047\uff62\050\uff62\051" +
    "\uff62\052\uff62\053\uff62\054\uff62\062\uff62\070\uff62\073\uff62" +
    "\074\uff62\075\uff62\076\uff62\077\uff62\001\002\000\004\010" +
    "\373\001\002\000\010\004\366\005\365\010\uff5e\001\002" +
    "\000\004\070\364\001\002\000\004\072\367\001\002\000" +
    "\006\005\370\010\uff5d\001\002\000\004\070\364\001\002" +
    "\000\004\010\uff5b\001\002\000\004\010\uff5c\001\002\000" +
    "\052\017\uff5f\040\uff5f\041\uff5f\043\uff5f\044\uff5f\045\uff5f" +
    "\046\uff5f\047\uff5f\050\uff5f\051\uff5f\052\uff5f\053\uff5f\054" +
    "\uff5f\062\uff5f\070\uff5f\073\uff5f\074\uff5f\075\uff5f\076\uff5f" +
    "\077\uff5f\001\002\000\004\010\375\001\002\000\052\017" +
    "\uff60\040\uff60\041\uff60\043\uff60\044\uff60\045\uff60\046\uff60" +
    "\047\uff60\050\uff60\051\uff60\052\uff60\053\uff60\054\uff60\062" +
    "\uff60\070\uff60\073\uff60\074\uff60\075\uff60\076\uff60\077\uff60" +
    "\001\002\000\052\017\uff84\040\uff84\041\uff84\043\uff84\044" +
    "\uff84\045\uff84\046\uff84\047\uff84\050\uff84\051\uff84\052\uff84" +
    "\053\uff84\054\uff84\062\uff84\070\uff84\073\uff84\074\uff84\075" +
    "\uff84\076\uff84\077\uff84\001\002\000\004\020\u0100\001\002" +
    "\000\022\020\160\036\157\057\123\060\122\070\155\071" +
    "\146\072\151\100\147\001\002\000\004\021\u0102\001\002" +
    "\000\004\010\u0103\001\002\000\052\017\uff1a\040\uff1a\041" +
    "\uff1a\043\uff1a\044\uff1a\045\uff1a\046\uff1a\047\uff1a\050\uff1a" +
    "\051\uff1a\052\uff1a\053\uff1a\054\uff1a\062\uff1a\070\uff1a\073" +
    "\uff1a\074\uff1a\075\uff1a\076\uff1a\077\uff1a\001\002\000\010" +
    "\004\u0107\005\u0105\010\u0106\001\002\000\004\070\u010c\001" +
    "\002\000\052\017\uff59\040\uff59\041\uff59\043\uff59\044\uff59" +
    "\045\uff59\046\uff59\047\uff59\050\uff59\051\uff59\052\uff59\053" +
    "\uff59\054\uff59\062\uff59\070\uff59\073\uff59\074\uff59\075\uff59" +
    "\076\uff59\077\uff59\001\002\000\006\020\160\100\147\001" +
    "\002\000\006\005\u0109\010\u010a\001\002\000\004\070\u010c" +
    "\001\002\000\052\017\uff5a\040\uff5a\041\uff5a\043\uff5a\044" +
    "\uff5a\045\uff5a\046\uff5a\047\uff5a\050\uff5a\051\uff5a\052\uff5a" +
    "\053\uff5a\054\uff5a\062\uff5a\070\uff5a\073\uff5a\074\uff5a\075" +
    "\uff5a\076\uff5a\077\uff5a\001\002\000\004\010\u0113\001\002" +
    "\000\010\004\u010e\005\u010d\010\uff56\001\002\000\004\070" +
    "\u010c\001\002\000\006\020\160\100\147\001\002\000\006" +
    "\005\u0110\010\uff55\001\002\000\004\070\u010c\001\002\000" +
    "\004\010\uff54\001\002\000\004\010\uff53\001\002\000\052" +
    "\017\uff57\040\uff57\041\uff57\043\uff57\044\uff57\045\uff57\046" +
    "\uff57\047\uff57\050\uff57\051\uff57\052\uff57\053\uff57\054\uff57" +
    "\062\uff57\070\uff57\073\uff57\074\uff57\075\uff57\076\uff57\077" +
    "\uff57\001\002\000\004\010\u0115\001\002\000\052\017\uff58" +
    "\040\uff58\041\uff58\043\uff58\044\uff58\045\uff58\046\uff58\047" +
    "\uff58\050\uff58\051\uff58\052\uff58\053\uff58\054\uff58\062\uff58" +
    "\070\uff58\073\uff58\074\uff58\075\uff58\076\uff58\077\uff58\001" +
    "\002\000\010\004\u0118\005\u0117\010\u0119\001\002\000\004" +
    "\070\u011e\001\002\000\006\020\160\100\147\001\002\000" +
    "\052\017\uff7b\040\uff7b\041\uff7b\043\uff7b\044\uff7b\045\uff7b" +
    "\046\uff7b\047\uff7b\050\uff7b\051\uff7b\052\uff7b\053\uff7b\054" +
    "\uff7b\062\uff7b\070\uff7b\073\uff7b\074\uff7b\075\uff7b\076\uff7b" +
    "\077\uff7b\001\002\000\006\005\u011b\010\u011c\001\002\000" +
    "\004\070\u011e\001\002\000\052\017\uff7c\040\uff7c\041\uff7c" +
    "\043\uff7c\044\uff7c\045\uff7c\046\uff7c\047\uff7c\050\uff7c\051" +
    "\uff7c\052\uff7c\053\uff7c\054\uff7c\062\uff7c\070\uff7c\073\uff7c" +
    "\074\uff7c\075\uff7c\076\uff7c\077\uff7c\001\002\000\004\010" +
    "\u0125\001\002\000\010\004\u0120\005\u011f\010\uff78\001\002" +
    "\000\004\070\u011e\001\002\000\006\020\160\100\147\001" +
    "\002\000\006\005\u0122\010\uff77\001\002\000\004\070\u011e" +
    "\001\002\000\004\010\uff75\001\002\000\004\010\uff76\001" +
    "\002\000\052\017\uff79\040\uff79\041\uff79\043\uff79\044\uff79" +
    "\045\uff79\046\uff79\047\uff79\050\uff79\051\uff79\052\uff79\053" +
    "\uff79\054\uff79\062\uff79\070\uff79\073\uff79\074\uff79\075\uff79" +
    "\076\uff79\077\uff79\001\002\000\004\010\u0127\001\002\000" +
    "\052\017\uff7a\040\uff7a\041\uff7a\043\uff7a\044\uff7a\045\uff7a" +
    "\046\uff7a\047\uff7a\050\uff7a\051\uff7a\052\uff7a\053\uff7a\054" +
    "\uff7a\062\uff7a\070\uff7a\073\uff7a\074\uff7a\075\uff7a\076\uff7a" +
    "\077\uff7a\001\002\000\006\017\uffc0\053\uffc0\001\002\000" +
    "\004\017\ufff5\001\002\000\010\004\u012c\005\u012b\010\u012d" +
    "\001\002\000\004\070\u0132\001\002\000\006\066\u012e\070" +
    "\u012f\001\002\000\052\017\uff4f\040\uff4f\041\uff4f\043\uff4f" +
    "\044\uff4f\045\uff4f\046\uff4f\047\uff4f\050\uff4f\051\uff4f\052" +
    "\uff4f\053\uff4f\054\uff4f\062\uff4f\070\uff4f\073\uff4f\074\uff4f" +
    "\075\uff4f\076\uff4f\077\uff4f\001\002\000\006\040\u0148\070" +
    "\u0147\001\002\000\006\005\u0130\010\u0131\001\002\000\004" +
    "\070\u0132\001\002\000\052\017\uff50\040\uff50\041\uff50\043" +
    "\uff50\044\uff50\045\uff50\046\uff50\047\uff50\050\uff50\051\uff50" +
    "\052\uff50\053\uff50\054\uff50\062\uff50\070\uff50\073\uff50\074" +
    "\uff50\075\uff50\076\uff50\077\uff50\001\002\000\010\004\u0136" +
    "\005\u0135\010\uff4a\001\002\000\004\010\u0134\001\002\000" +
    "\052\017\uff4d\040\uff4d\041\uff4d\043\uff4d\044\uff4d\045\uff4d" +
    "\046\uff4d\047\uff4d\050\uff4d\051\uff4d\052\uff4d\053\uff4d\054" +
    "\uff4d\062\uff4d\070\uff4d\073\uff4d\074\uff4d\075\uff4d\076\uff4d" +
    "\077\uff4d\001\002\000\004\070\u0132\001\002\000\006\066" +
    "\u0137\070\u0138\001\002\000\006\040\u013c\070\u013b\001\002" +
    "\000\006\005\u0139\010\uff45\001\002\000\004\070\u0132\001" +
    "\002\000\004\010\uff44\001\002\000\004\020\u0141\001\002" +
    "\000\004\020\u013d\001\002\000\004\021\u013e\001\002\000" +
    "\006\005\u013f\010\uff49\001\002\000\004\070\u0132\001\002" +
    "\000\004\010\uff48\001\002\000\014\073\344\074\345\075" +
    "\343\076\341\077\337\001\002\000\004\021\u0143\001\002" +
    "\000\006\005\u0144\010\uff47\001\002\000\004\070\u0132\001" +
    "\002\000\004\010\uff46\001\002\000\004\010\uff43\001\002" +
    "\000\004\020\u014f\001\002\000\004\020\u0149\001\002\000" +
    "\004\021\u014a\001\002\000\006\005\u014b\010\u014c\001\002" +
    "\000\004\070\u0132\001\002\000\052\017\uff52\040\uff52\041" +
    "\uff52\043\uff52\044\uff52\045\uff52\046\uff52\047\uff52\050\uff52" +
    "\051\uff52\052\uff52\053\uff52\054\uff52\062\uff52\070\uff52\073" +
    "\uff52\074\uff52\075\uff52\076\uff52\077\uff52\001\002\000\004" +
    "\010\u014e\001\002\000\052\017\uff4c\040\uff4c\041\uff4c\043" +
    "\uff4c\044\uff4c\045\uff4c\046\uff4c\047\uff4c\050\uff4c\051\uff4c" +
    "\052\uff4c\053\uff4c\054\uff4c\062\uff4c\070\uff4c\073\uff4c\074" +
    "\uff4c\075\uff4c\076\uff4c\077\uff4c\001\002\000\014\073\344" +
    "\074\345\075\343\076\341\077\337\001\002\000\004\021" +
    "\u0151\001\002\000\006\005\u0152\010\u0153\001\002\000\004" +
    "\070\u0132\001\002\000\052\017\uff51\040\uff51\041\uff51\043" +
    "\uff51\044\uff51\045\uff51\046\uff51\047\uff51\050\uff51\051\uff51" +
    "\052\uff51\053\uff51\054\uff51\062\uff51\070\uff51\073\uff51\074" +
    "\uff51\075\uff51\076\uff51\077\uff51\001\002\000\004\010\u0155" +
    "\001\002\000\052\017\uff4b\040\uff4b\041\uff4b\043\uff4b\044" +
    "\uff4b\045\uff4b\046\uff4b\047\uff4b\050\uff4b\051\uff4b\052\uff4b" +
    "\053\uff4b\054\uff4b\062\uff4b\070\uff4b\073\uff4b\074\uff4b\075" +
    "\uff4b\076\uff4b\077\uff4b\001\002\000\004\010\u0157\001\002" +
    "\000\052\017\uff4e\040\uff4e\041\uff4e\043\uff4e\044\uff4e\045" +
    "\uff4e\046\uff4e\047\uff4e\050\uff4e\051\uff4e\052\uff4e\053\uff4e" +
    "\054\uff4e\062\uff4e\070\uff4e\073\uff4e\074\uff4e\075\uff4e\076" +
    "\uff4e\077\uff4e\001\002\000\012\004\117\005\116\010\120" +
    "\020\u0159\001\002\000\016\021\uffcd\073\uffcd\074\uffcd\075" +
    "\uffcd\076\uffcd\077\uffcd\001\002\000\004\017\ufff1\001\002" +
    "\000\022\020\160\036\157\057\123\060\122\070\155\071" +
    "\146\072\151\100\147\001\002\000\004\021\u015d\001\002" +
    "\000\004\016\u015e\001\002\000\044\017\u015f\040\071\041" +
    "\043\043\033\044\062\045\074\046\056\047\014\050\006" +
    "\051\010\052\016\070\106\073\101\074\112\075\107\076" +
    "\105\077\102\001\002\000\052\017\uff1c\040\uff1c\041\uff1c" +
    "\043\uff1c\044\uff1c\045\uff1c\046\uff1c\047\uff1c\050\uff1c\051" +
    "\uff1c\052\uff1c\053\uff1c\054\uff1c\062\uff1c\070\uff1c\073\uff1c" +
    "\074\uff1c\075\uff1c\076\uff1c\077\uff1c\001\002\000\004\017" +
    "\u0161\001\002\000\052\017\uff1b\040\uff1b\041\uff1b\043\uff1b" +
    "\044\uff1b\045\uff1b\046\uff1b\047\uff1b\050\uff1b\051\uff1b\052" +
    "\uff1b\053\uff1b\054\uff1b\062\uff1b\070\uff1b\073\uff1b\074\uff1b" +
    "\075\uff1b\076\uff1b\077\uff1b\001\002\000\004\016\u0164\001" +
    "\002\000\052\017\uffc3\040\uffc3\041\uffc3\043\uffc3\044\uffc3" +
    "\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053" +
    "\uffc3\054\uffc3\062\uffc3\070\uffc3\073\uffc3\074\uffc3\075\uffc3" +
    "\076\uffc3\077\uffc3\001\002\000\044\017\u0165\040\071\041" +
    "\043\043\033\044\062\045\074\046\056\047\014\050\006" +
    "\051\010\052\016\070\106\073\101\074\112\075\107\076" +
    "\105\077\102\001\002\000\052\017\uffb8\040\uffb8\041\uffb8" +
    "\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051" +
    "\uffb8\052\uffb8\053\uffb8\054\uffb8\062\uffb8\070\uffb8\073\uffb8" +
    "\074\uffb8\075\uffb8\076\uffb8\077\uffb8\001\002\000\004\017" +
    "\u0167\001\002\000\052\017\uffb9\040\uffb9\041\uffb9\043\uffb9" +
    "\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052" +
    "\uffb9\053\uffb9\054\uffb9\062\uffb9\070\uffb9\073\uffb9\074\uffb9" +
    "\075\uffb9\076\uffb9\077\uffb9\001\002\000\004\017\ufff7\001" +
    "\002\000\004\070\u016a\001\002\000\004\021\u016b\001\002" +
    "\000\004\016\u016c\001\002\000\004\063\u016d\001\002\000" +
    "\010\071\u0177\072\u0176\100\u0175\001\002\000\006\017\u0170" +
    "\064\u016f\001\002\000\004\007\u0171\001\002\000\052\017" +
    "\uff11\040\uff11\041\uff11\043\uff11\044\uff11\045\uff11\046\uff11" +
    "\047\uff11\050\uff11\051\uff11\052\uff11\053\uff11\054\uff11\062" +
    "\uff11\070\uff11\073\uff11\074\uff11\075\uff11\076\uff11\077\uff11" +
    "\001\002\000\004\053\u0172\001\002\000\004\010\u0173\001" +
    "\002\000\004\017\u0174\001\002\000\052\017\uff12\040\uff12" +
    "\041\uff12\043\uff12\044\uff12\045\uff12\046\uff12\047\uff12\050" +
    "\uff12\051\uff12\052\uff12\053\uff12\054\uff12\062\uff12\070\uff12" +
    "\073\uff12\074\uff12\075\uff12\076\uff12\077\uff12\001\002\000" +
    "\004\007\u0184\001\002\000\004\007\u017e\001\002\000\004" +
    "\007\u0178\001\002\000\044\040\071\041\043\043\033\044" +
    "\062\045\074\046\056\047\014\050\006\051\010\052\016" +
    "\053\u017a\070\106\073\101\074\112\075\107\076\105\077" +
    "\102\001\002\000\004\053\u017c\001\002\000\004\010\u017b" +
    "\001\002\000\006\017\uff17\064\uff17\001\002\000\004\010" +
    "\u017d\001\002\000\006\017\uff14\064\uff14\001\002\000\044" +
    "\040\071\041\043\043\033\044\062\045\074\046\056\047" +
    "\014\050\006\051\010\052\016\053\u0180\070\106\073\101" +
    "\074\112\075\107\076\105\077\102\001\002\000\004\053" +
    "\u0182\001\002\000\004\010\u0181\001\002\000\006\017\uff18" +
    "\064\uff18\001\002\000\004\010\u0183\001\002\000\006\017" +
    "\uff15\064\uff15\001\002\000\044\040\071\041\043\043\033" +
    "\044\062\045\074\046\056\047\014\050\006\051\010\052" +
    "\016\053\u0186\070\106\073\101\074\112\075\107\076\105" +
    "\077\102\001\002\000\004\053\u0188\001\002\000\004\010" +
    "\u0187\001\002\000\006\017\uff16\064\uff16\001\002\000\004" +
    "\010\u0189\001\002\000\006\017\uff13\064\uff13\001\002\000" +
    "\004\020\u018b\001\002\000\016\021\u018d\073\344\074\345" +
    "\075\343\076\341\077\337\001\002\000\004\021\u0199\001" +
    "\002\000\004\016\u018e\001\002\000\042\040\071\041\043" +
    "\043\033\044\062\045\074\046\056\047\014\050\006\051" +
    "\010\052\016\070\106\073\101\074\112\075\107\076\105" +
    "\077\102\001\002\000\004\017\u0198\001\002\000\046\017" +
    "\uffee\040\071\041\043\043\033\044\062\045\074\046\056" +
    "\047\014\050\006\051\010\052\016\054\uffee\070\106\073" +
    "\101\074\112\075\107\076\105\077\102\001\002\000\046" +
    "\017\uff93\040\uff93\041\uff93\043\uff93\044\uff93\045\uff93\046" +
    "\uff93\047\uff93\050\uff93\051\uff93\052\uff93\054\uff93\070\uff93" +
    "\073\uff93\074\uff93\075\uff93\076\uff93\077\uff93\001\002\000" +
    "\046\017\uffec\040\071\041\043\043\033\044\062\045\074" +
    "\046\056\047\014\050\006\051\010\052\016\054\uffec\070" +
    "\106\073\101\074\112\075\107\076\105\077\102\001\002" +
    "\000\046\017\uff94\040\uff94\041\uff94\043\uff94\044\uff94\045" +
    "\uff94\046\uff94\047\uff94\050\uff94\051\uff94\052\uff94\054\uff94" +
    "\070\uff94\073\uff94\074\uff94\075\uff94\076\uff94\077\uff94\001" +
    "\002\000\046\017\uffea\040\071\041\043\043\033\044\062" +
    "\045\074\046\056\047\014\050\006\051\010\052\016\054" +
    "\uffea\070\106\073\101\074\112\075\107\076\105\077\102" +
    "\001\002\000\006\017\uffe9\054\uffe9\001\002\000\006\017" +
    "\uffeb\054\uffeb\001\002\000\006\017\uffed\054\uffed\001\002" +
    "\000\046\017\uffd7\040\uffd7\041\uffd7\043\uffd7\044\uffd7\045" +
    "\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\062\uffd7" +
    "\070\uffd7\073\uffd7\074\uffd7\075\uffd7\076\uffd7\077\uffd7\001" +
    "\002\000\004\016\u019a\001\002\000\044\017\u019b\040\071" +
    "\041\043\043\033\044\062\045\074\046\056\047\014\050" +
    "\006\051\010\052\016\070\106\073\101\074\112\075\107" +
    "\076\105\077\102\001\002\000\046\017\uffda\040\uffda\041" +
    "\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047\uffda\050\uffda" +
    "\051\uffda\052\uffda\062\uffda\070\uffda\073\uffda\074\uffda\075" +
    "\uffda\076\uffda\077\uffda\001\002\000\004\017\u019d\001\002" +
    "\000\046\017\uffd9\040\uffd9\041\uffd9\043\uffd9\044\uffd9\045" +
    "\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\062\uffd9" +
    "\070\uffd9\073\uffd9\074\uffd9\075\uffd9\076\uffd9\077\uffd9\001" +
    "\002\000\012\004\276\005\275\010\277\020\u019f\001\002" +
    "\000\016\021\uffcc\073\uffcc\074\uffcc\075\uffcc\076\uffcc\077" +
    "\uffcc\001\002\000\014\073\344\074\345\075\343\076\341" +
    "\077\337\001\002\000\004\021\u01a2\001\002\000\004\016" +
    "\u01a3\001\002\000\006\017\u01a6\065\u01a5\001\002\000\004" +
    "\017\u01ad\001\002\000\004\006\u01a7\001\002\000\046\017" +
    "\uffde\040\uffde\041\uffde\043\uffde\044\uffde\045\uffde\046\uffde" +
    "\047\uffde\050\uffde\051\uffde\052\uffde\062\uffde\070\uffde\073" +
    "\uffde\074\uffde\075\uffde\076\uffde\077\uffde\001\002\000\004" +
    "\070\u01a8\001\002\000\004\004\u01a9\001\002\000\004\070" +
    "\u01aa\001\002\000\004\010\u01ab\001\002\000\006\017\uffe2" +
    "\065\u01a5\001\002\000\004\017\uffe1\001\002\000\046\017" +
    "\uffdd\040\uffdd\041\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd" +
    "\047\uffdd\050\uffdd\051\uffdd\052\uffdd\062\uffdd\070\uffdd\073" +
    "\uffdd\074\uffdd\075\uffdd\076\uffdd\077\uffdd\001\002\000\022" +
    "\020\160\036\157\057\123\060\122\070\155\071\146\072" +
    "\151\100\147\001\002\000\004\021\u01b0\001\002\000\004" +
    "\016\u01b1\001\002\000\044\017\u01b2\040\071\041\043\043" +
    "\033\044\062\045\074\046\056\047\014\050\006\051\010" +
    "\052\016\070\106\073\101\074\112\075\107\076\105\077" +
    "\102\001\002\000\054\017\uffba\040\uffba\041\uffba\042\uffba" +
    "\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051" +
    "\uffba\052\uffba\053\uffba\054\uffba\062\uffba\070\uffba\073\uffba" +
    "\074\uffba\075\uffba\076\uffba\077\uffba\001\002\000\004\017" +
    "\u01b4\001\002\000\054\017\uffbb\040\uffbb\041\uffbb\042\uffbb" +
    "\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051" +
    "\uffbb\052\uffbb\053\uffbb\054\uffbb\062\uffbb\070\uffbb\073\uffbb" +
    "\074\uffbb\075\uffbb\076\uffbb\077\uffbb\001\002\000\004\016" +
    "\u01c2\001\002\000\004\021\u01b7\001\002\000\004\016\u01b8" +
    "\001\002\000\044\040\071\041\043\043\033\044\062\045" +
    "\074\046\056\047\014\050\006\051\010\052\016\054\u01ba" +
    "\070\106\073\101\074\112\075\107\076\105\077\102\001" +
    "\002\000\004\054\u01be\001\002\000\004\070\u01bb\001\002" +
    "\000\004\010\u01bc\001\002\000\004\017\u01bd\001\002\000" +
    "\046\017\uffd1\040\uffd1\041\uffd1\043\uffd1\044\uffd1\045\uffd1" +
    "\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\062\uffd1\070" +
    "\uffd1\073\uffd1\074\uffd1\075\uffd1\076\uffd1\077\uffd1\001\002" +
    "\000\004\070\u01bf\001\002\000\004\010\u01c0\001\002\000" +
    "\004\017\u01c1\001\002\000\046\017\uffd3\040\uffd3\041\uffd3" +
    "\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051" +
    "\uffd3\052\uffd3\062\uffd3\070\uffd3\073\uffd3\074\uffd3\075\uffd3" +
    "\076\uffd3\077\uffd3\001\002\000\042\040\071\041\043\043" +
    "\033\044\062\045\074\046\056\047\014\050\006\051\010" +
    "\052\016\070\106\073\101\074\112\075\107\076\105\077" +
    "\102\001\002\000\004\054\u01c4\001\002\000\004\070\u01c5" +
    "\001\002\000\004\010\u01c6\001\002\000\004\017\u01c7\001" +
    "\002\000\046\017\uffcf\040\uffcf\041\uffcf\043\uffcf\044\uffcf" +
    "\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\062" +
    "\uffcf\070\uffcf\073\uffcf\074\uffcf\075\uffcf\076\uffcf\077\uffcf" +
    "\001\002\000\012\004\356\005\355\010\357\020\u01c9\001" +
    "\002\000\016\021\uffcb\073\uffcb\074\uffcb\075\uffcb\076\uffcb" +
    "\077\uffcb\001\002\000\004\070\u01e7\001\002\000\004\020" +
    "\u01e0\001\002\000\016\021\u01cd\073\344\074\345\075\343" +
    "\076\341\077\337\001\002\000\004\016\u01da\001\002\000" +
    "\004\021\u01cf\001\002\000\004\016\u01d0\001\002\000\044" +
    "\040\071\041\043\043\033\044\062\045\074\046\056\047" +
    "\014\050\006\051\010\052\016\054\u01d2\070\106\073\101" +
    "\074\112\075\107\076\105\077\102\001\002\000\004\054" +
    "\u01d6\001\002\000\004\070\u01d3\001\002\000\004\010\u01d4" +
    "\001\002\000\004\017\u01d5\001\002\000\046\017\uffd2\040" +
    "\uffd2\041\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2" +
    "\050\uffd2\051\uffd2\052\uffd2\062\uffd2\070\uffd2\073\uffd2\074" +
    "\uffd2\075\uffd2\076\uffd2\077\uffd2\001\002\000\004\070\u01d7" +
    "\001\002\000\004\010\u01d8\001\002\000\004\017\u01d9\001" +
    "\002\000\046\017\uffd4\040\uffd4\041\uffd4\043\uffd4\044\uffd4" +
    "\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\062" +
    "\uffd4\070\uffd4\073\uffd4\074\uffd4\075\uffd4\076\uffd4\077\uffd4" +
    "\001\002\000\042\040\071\041\043\043\033\044\062\045" +
    "\074\046\056\047\014\050\006\051\010\052\016\070\106" +
    "\073\101\074\112\075\107\076\105\077\102\001\002\000" +
    "\004\054\u01dc\001\002\000\004\070\u01dd\001\002\000\004" +
    "\010\u01de\001\002\000\004\017\u01df\001\002\000\046\017" +
    "\uffd0\040\uffd0\041\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0" +
    "\047\uffd0\050\uffd0\051\uffd0\052\uffd0\062\uffd0\070\uffd0\073" +
    "\uffd0\074\uffd0\075\uffd0\076\uffd0\077\uffd0\001\002\000\014" +
    "\073\344\074\345\075\343\076\341\077\337\001\002\000" +
    "\004\021\u01e2\001\002\000\004\016\u01e3\001\002\000\006" +
    "\017\u01e5\065\u01a5\001\002\000\004\017\u01e6\001\002\000" +
    "\046\017\uffdf\040\uffdf\041\uffdf\043\uffdf\044\uffdf\045\uffdf" +
    "\046\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\062\uffdf\070" +
    "\uffdf\073\uffdf\074\uffdf\075\uffdf\076\uffdf\077\uffdf\001\002" +
    "\000\046\017\uffe0\040\uffe0\041\uffe0\043\uffe0\044\uffe0\045" +
    "\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\062\uffe0" +
    "\070\uffe0\073\uffe0\074\uffe0\075\uffe0\076\uffe0\077\uffe0\001" +
    "\002\000\004\020\u01e8\001\002\000\016\021\u01ea\073\344" +
    "\074\345\075\343\076\341\077\337\001\002\000\004\021" +
    "\u01ee\001\002\000\004\016\u01eb\001\002\000\042\040\071" +
    "\041\043\043\033\044\062\045\074\046\056\047\014\050" +
    "\006\051\010\052\016\070\106\073\101\074\112\075\107" +
    "\076\105\077\102\001\002\000\004\017\u01ed\001\002\000" +
    "\046\017\uffd8\040\uffd8\041\uffd8\043\uffd8\044\uffd8\045\uffd8" +
    "\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\062\uffd8\070" +
    "\uffd8\073\uffd8\074\uffd8\075\uffd8\076\uffd8\077\uffd8\001\002" +
    "\000\004\016\u01ef\001\002\000\044\017\u01f0\040\071\041" +
    "\043\043\033\044\062\045\074\046\056\047\014\050\006" +
    "\051\010\052\016\070\106\073\101\074\112\075\107\076" +
    "\105\077\102\001\002\000\046\017\uffdb\040\uffdb\041\uffdb" +
    "\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051" +
    "\uffdb\052\uffdb\062\uffdb\070\uffdb\073\uffdb\074\uffdb\075\uffdb" +
    "\076\uffdb\077\uffdb\001\002\000\004\017\u01f2\001\002\000" +
    "\046\017\uffdc\040\uffdc\041\uffdc\043\uffdc\044\uffdc\045\uffdc" +
    "\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\062\uffdc\070" +
    "\uffdc\073\uffdc\074\uffdc\075\uffdc\076\uffdc\077\uffdc\001\002" +
    "\000\006\070\u01f4\073\u01f5\001\002\000\004\004\u0218\001" +
    "\002\000\004\070\u01f6\001\002\000\004\004\u01f7\001\002" +
    "\000\006\020\u01fa\100\u01f8\001\002\000\020\010\uff38\011" +
    "\200\012\173\013\177\014\172\015\174\021\uff38\001\002" +
    "\000\004\010\u0204\001\002\000\004\100\u01fb\001\002\000" +
    "\016\011\200\012\173\013\177\014\172\015\174\021\u01fc" +
    "\001\002\000\020\010\uff3c\011\200\012\173\013\177\014" +
    "\172\015\174\021\uff3c\001\002\000\006\020\u01fa\100\u01f8" +
    "\001\002\000\004\021\u01ff\001\002\000\020\010\uff3a\011" +
    "\200\012\173\013\177\014\172\015\174\021\uff3a\001\002" +
    "\000\006\020\u01fa\100\u01f8\001\002\000\006\010\uff39\021" +
    "\uff39\001\002\000\006\020\u01fa\100\u01f8\001\002\000\006" +
    "\010\uff3b\021\uff3b\001\002\000\004\073\u0205\001\002\000" +
    "\012\024\u0208\025\u0206\030\u0209\031\u020a\001\002\000\006" +
    "\020\uff25\100\uff25\001\002\000\006\020\u01fa\100\u01f8\001" +
    "\002\000\006\020\uff26\100\uff26\001\002\000\006\020\uff24" +
    "\100\uff24\001\002\000\006\020\uff23\100\uff23\001\002\000" +
    "\004\010\u020c\001\002\000\004\070\u020d\001\002\000\006" +
    "\032\u0210\033\u020e\001\002\000\004\021\uff21\001\002\000" +
    "\004\021\u0211\001\002\000\004\021\uff22\001\002\000\004" +
    "\016\u0212\001\002\000\044\017\u0213\040\071\041\043\043" +
    "\033\044\062\045\074\046\056\047\014\050\006\051\010" +
    "\052\016\070\106\073\101\074\112\075\107\076\105\077" +
    "\102\001\002\000\052\017\uff20\040\uff20\041\uff20\043\uff20" +
    "\044\uff20\045\uff20\046\uff20\047\uff20\050\uff20\051\uff20\052" +
    "\uff20\053\uff20\054\uff20\062\uff20\070\uff20\073\uff20\074\uff20" +
    "\075\uff20\076\uff20\077\uff20\001\002\000\004\017\u0215\001" +
    "\002\000\052\017\uff1e\040\uff1e\041\uff1e\043\uff1e\044\uff1e" +
    "\045\uff1e\046\uff1e\047\uff1e\050\uff1e\051\uff1e\052\uff1e\053" +
    "\uff1e\054\uff1e\062\uff1e\070\uff1e\073\uff1e\074\uff1e\075\uff1e" +
    "\076\uff1e\077\uff1e\001\002\000\006\020\u01fa\100\u01f8\001" +
    "\002\000\006\010\uff37\021\uff37\001\002\000\006\020\u01fa" +
    "\100\u01f8\001\002\000\004\010\u021a\001\002\000\004\073" +
    "\u021b\001\002\000\012\024\u0208\025\u0206\030\u0209\031\u020a" +
    "\001\002\000\006\020\u01fa\100\u01f8\001\002\000\004\010" +
    "\u021e\001\002\000\004\070\u021f\001\002\000\004\004\u0220" +
    "\001\002\000\004\070\u0221\001\002\000\014\011\200\012" +
    "\173\013\177\014\172\015\174\001\002\000\006\020\u01fa" +
    "\100\u01f8\001\002\000\004\021\u0224\001\002\000\004\016" +
    "\u0225\001\002\000\044\017\u0226\040\071\041\043\043\033" +
    "\044\062\045\074\046\056\047\014\050\006\051\010\052" +
    "\016\070\106\073\101\074\112\075\107\076\105\077\102" +
    "\001\002\000\052\017\uff1f\040\uff1f\041\uff1f\043\uff1f\044" +
    "\uff1f\045\uff1f\046\uff1f\047\uff1f\050\uff1f\051\uff1f\052\uff1f" +
    "\053\uff1f\054\uff1f\062\uff1f\070\uff1f\073\uff1f\074\uff1f\075" +
    "\uff1f\076\uff1f\077\uff1f\001\002\000\004\017\u0228\001\002" +
    "\000\052\017\uff1d\040\uff1d\041\uff1d\043\uff1d\044\uff1d\045" +
    "\uff1d\046\uff1d\047\uff1d\050\uff1d\051\uff1d\052\uff1d\053\uff1d" +
    "\054\uff1d\062\uff1d\070\uff1d\073\uff1d\074\uff1d\075\uff1d\076" +
    "\uff1d\077\uff1d\001\002\000\004\017\ufff3\001\002\000\012" +
    "\004\u0107\005\u0105\010\u0106\020\u022b\001\002\000\016\021" +
    "\uffca\073\uffca\074\uffca\075\uffca\076\uffca\077\uffca\001\002" +
    "\000\012\004\u0118\005\u0117\010\u0119\020\u022d\001\002\000" +
    "\016\021\uffce\073\uffce\074\uffce\075\uffce\076\uffce\077\uffce" +
    "\001\002\000\004\017\ufff9\001\002\000\016\002\uffe3\047" +
    "\uffe3\050\uffe3\051\uffe3\052\uffe3\061\uffe3\001\002\000\004" +
    "\070\u0231\001\002\000\004\016\u0232\001\002\000\044\040" +
    "\071\041\043\043\033\044\062\045\074\046\056\047\014" +
    "\050\006\051\010\052\016\062\052\070\046\073\027\074" +
    "\070\075\051\076\037\077\030\001\002\000\004\017\u0234" +
    "\001\002\000\016\002\uffe4\047\uffe4\050\uffe4\051\uffe4\052" +
    "\uffe4\061\uffe4\001\002\000\004\002\uffff\001\002\000\010" +
    "\006\u0237\010\u023a\070\u0238\001\002\000\006\014\u023e\070" +
    "\u023f\001\002\000\004\006\u0237\001\002\000\004\010\u023b" +
    "\001\002\000\022\002\uff42\003\uff42\037\uff42\047\uff42\050" +
    "\uff42\051\uff42\052\uff42\061\uff42\001\002\000\022\002\uff41" +
    "\003\uff41\037\uff41\047\uff41\050\uff41\051\uff41\052\uff41\061" +
    "\uff41\001\002\000\004\010\u023d\001\002\000\022\002\uff40" +
    "\003\uff40\037\uff40\047\uff40\050\uff40\051\uff40\052\uff40\061" +
    "\uff40\001\002\000\004\010\uff3d\001\002\000\006\006\u0237" +
    "\010\uff3f\001\002\000\004\010\uff3e\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u023e\000\014\002\016\013\010\042\004\046\014\050" +
    "\006\001\001\000\002\001\001\000\014\002\u0234\013\010" +
    "\042\004\046\014\050\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\002\021\013\010\042\004\046\014\050" +
    "\006\001\001\000\002\001\001\000\010\013\010\046\014" +
    "\050\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\072\003\052\004\066\005\063\006\033\007" +
    "\035\010\040\011\047\013\034\021\046\023\072\024\031" +
    "\025\041\026\043\027\044\030\025\031\065\032\056\033" +
    "\057\052\071\053\064\055\024\060\037\064\062\065\054" +
    "\066\060\067\053\071\074\074\030\001\001\000\002\001" +
    "\001\000\072\003\052\004\066\005\063\006\033\007\035" +
    "\010\040\011\047\013\034\021\046\023\072\024\031\025" +
    "\041\026\043\027\044\030\025\031\065\032\056\033\057" +
    "\052\071\053\064\055\u022d\060\037\064\062\065\054\066" +
    "\060\067\053\071\074\074\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\072\003\052\004\066\005\063\006" +
    "\033\007\035\010\040\011\047\013\034\021\046\023\072" +
    "\024\031\025\041\026\043\027\044\030\025\031\065\032" +
    "\056\033\057\052\071\053\064\055\u0228\060\037\064\062" +
    "\065\054\066\060\067\053\071\074\074\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\375\004\066\005\063\006\033\007\035\010\040\011" +
    "\047\060\u01cb\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\056\u01b5\057\341\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\072\003\052\004\066\005\063\006\033\007\035\010\040" +
    "\011\047\013\034\021\046\023\072\024\031\025\041\026" +
    "\043\027\044\030\025\031\065\032\056\033\057\052\071" +
    "\053\064\055\u0167\060\037\064\062\065\054\066\060\067" +
    "\053\071\074\074\030\001\001\000\004\034\u0162\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\072\003\052\004\066\005\063\006\033" +
    "\007\035\010\040\011\047\013\034\021\046\023\072\024" +
    "\031\025\041\026\043\027\044\030\025\031\065\032\056" +
    "\033\057\052\071\053\064\055\u0159\060\037\064\062\065" +
    "\054\066\060\067\053\071\074\074\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\072\003\052\004\066\005\063\006\033\007\035" +
    "\010\040\011\047\013\034\021\046\023\072\024\031\025" +
    "\041\026\043\027\044\030\025\031\065\032\056\033\057" +
    "\052\071\053\064\055\u0128\060\037\064\062\065\054\066" +
    "\060\067\053\071\074\074\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\072\003\052\004\066\005\063\006" +
    "\033\007\035\010\040\011\047\013\034\021\046\023\072" +
    "\024\031\025\041\026\043\027\044\030\025\031\065\032" +
    "\056\033\057\052\071\053\064\055\075\060\037\064\062" +
    "\065\054\066\060\067\053\071\074\074\030\001\001\000" +
    "\002\001\001\000\062\003\052\004\066\005\063\006\033" +
    "\007\035\010\040\011\047\013\103\021\046\023\072\024" +
    "\031\025\041\026\043\027\044\030\077\031\065\032\110" +
    "\033\057\064\062\065\054\066\060\067\053\071\112\075" +
    "\107\001\001\000\062\003\052\004\066\005\063\006\033" +
    "\007\035\010\040\011\047\013\103\021\046\023\072\024" +
    "\031\025\041\026\043\027\044\030\077\031\065\032\110" +
    "\033\057\064\062\065\054\066\060\067\053\071\112\075" +
    "\u0127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\375\004\066\005\063\006\033\007" +
    "\035\010\040\011\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\003" +
    "\052\004\066\005\063\006\033\007\035\010\040\011\047" +
    "\013\103\021\046\023\072\024\031\025\041\026\043\027" +
    "\044\030\077\031\065\032\110\033\057\064\062\065\054" +
    "\066\060\067\053\071\112\075\140\001\001\000\002\001" +
    "\001\000\062\003\052\004\066\005\063\006\033\007\035" +
    "\010\040\011\047\013\103\021\046\023\072\024\031\025" +
    "\041\026\043\027\044\030\077\031\065\032\110\033\057" +
    "\064\062\065\054\066\060\067\053\071\112\075\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\136" +
    "\001\001\000\004\015\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\135\001\001" +
    "\000\004\015\132\001\001\000\002\001\001\000\004\014" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\161\035\147\036\155" +
    "\037\151\040\153\041\152\045\160\047\144\001\001\000" +
    "\004\051\271\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\161\040\207\001\001\000\004\047" +
    "\170\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\045\166\047\144\001\001\000\006\045\164\047\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\204" +
    "\001\001\000\006\045\200\047\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\202" +
    "\001\001\000\006\045\203\047\144\001\001\000\002\001" +
    "\001\000\006\045\205\047\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\161\040" +
    "\216\001\001\000\006\015\161\040\213\001\001\000\006" +
    "\015\161\040\214\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\161\040\217\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\015\161\035\223\036\155\037" +
    "\151\040\153\041\152\045\160\047\144\001\001\000\022" +
    "\015\161\035\222\036\155\037\151\040\153\041\152\045" +
    "\160\047\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\227\061\235\001\001\000\006\015\227\061" +
    "\231\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\233\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\236\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\015\161\035\242\036\155\037" +
    "\151\040\153\041\152\045\160\047\144\001\001\000\022" +
    "\015\161\035\241\036\155\037\151\040\153\041\152\045" +
    "\160\047\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\037\254\045\247\047\144\001\001\000\010\037" +
    "\253\045\247\047\144\001\001\000\010\037\252\045\247" +
    "\047\144\001\001\000\010\037\251\045\247\047\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\045\272\047" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\313\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\302\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\311\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\310" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\015\323" +
    "\045\322\047\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\056\337\057\341\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\056\347\057\341\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\373\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\362" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\371\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\370\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\015" +
    "\161\035\u0100\036\155\037\151\040\153\041\152\045\160" +
    "\047\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\u0113\001\001" +
    "\000\002\001\001\000\006\045\u0107\047\144\001\001\000" +
    "\002\001\001\000\004\020\u010a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\u0111\001" +
    "\001\000\006\045\u010e\047\144\001\001\000\002\001\001" +
    "\000\004\020\u0110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\u0125\001\001\000\006\045" +
    "\u0119\047\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\u011c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\u0123\001\001\000\006" +
    "\045\u0120\047\144\001\001\000\002\001\001\000\004\012" +
    "\u0122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\076\u0155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\076\u0132\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\076\u0145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\076\u0139\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\076\u013f\001\001\000" +
    "\002\001\001\000\006\056\u0141\057\341\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\076\u0144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\076" +
    "\u014c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\056\u014f\057\341\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\076\u0153\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\015\161\035\u015b\036\155\037" +
    "\151\040\153\041\152\045\160\047\144\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\003\052\004\066\005" +
    "\063\006\033\007\035\010\040\011\047\013\103\021\046" +
    "\023\072\024\031\025\041\026\043\027\044\030\077\031" +
    "\065\032\110\033\057\064\062\065\054\066\060\067\053" +
    "\071\112\075\u015f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\003\052\004\066\005\063\006\033\007\035\010" +
    "\040\011\047\013\103\021\046\023\072\024\031\025\041" +
    "\026\043\027\044\030\077\031\065\032\110\033\057\064" +
    "\062\065\054\066\060\067\053\071\112\075\u0165\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\070\u016d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\003\052\004\066\005\063\006\033\007\035\010" +
    "\040\011\047\013\103\021\046\023\072\024\031\025\041" +
    "\026\043\027\044\030\077\031\065\032\110\033\057\064" +
    "\062\065\054\066\060\067\053\071\112\075\u0178\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\003\052\004\066" +
    "\005\063\006\033\007\035\010\040\011\047\013\103\021" +
    "\046\023\072\024\031\025\041\026\043\027\044\030\077" +
    "\031\065\032\110\033\057\064\062\065\054\066\060\067" +
    "\053\071\112\075\u017e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\003\052\004\066\005\063\006\033\007\035" +
    "\010\040\011\047\013\103\021\046\023\072\024\031\025" +
    "\041\026\043\027\044\030\077\031\065\032\110\033\057" +
    "\064\062\065\054\066\060\067\053\071\112\075\u0184\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\056\u018b\057\341\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\003\052\004\066\005\063\006\033\007" +
    "\035\010\040\011\047\013\103\021\u0190\023\072\024\031" +
    "\025\041\026\043\027\044\031\u0192\032\u0191\033\057\054" +
    "\u018e\064\062\065\054\066\060\067\053\071\u0193\072\u018f" +
    "\001\001\000\002\001\001\000\062\003\052\004\066\005" +
    "\063\006\033\007\035\010\040\011\047\013\103\021\u0190" +
    "\023\072\024\031\025\041\026\043\027\044\031\u0192\032" +
    "\u0191\033\057\054\u0196\064\062\065\054\066\060\067\053" +
    "\071\u0193\072\u018f\001\001\000\002\001\001\000\062\003" +
    "\052\004\066\005\063\006\033\007\035\010\040\011\047" +
    "\013\103\021\u0190\023\072\024\031\025\041\026\043\027" +
    "\044\031\u0192\032\u0191\033\057\054\u0195\064\062\065\054" +
    "\066\060\067\053\071\u0193\072\u018f\001\001\000\002\001" +
    "\001\000\062\003\052\004\066\005\063\006\033\007\035" +
    "\010\040\011\047\013\103\021\u0190\023\072\024\031\025" +
    "\041\026\043\027\044\031\u0192\032\u0191\033\057\054\u0194" +
    "\064\062\065\054\066\060\067\053\071\u0193\072\u018f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\003\052\004" +
    "\066\005\063\006\033\007\035\010\040\011\047\013\103" +
    "\021\u0190\023\072\024\031\025\041\026\043\027\044\031" +
    "\u0192\032\u0191\033\057\054\u019b\064\062\065\054\066\060" +
    "\067\053\071\u0193\072\u018f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\056\u01a0\057\341\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\073\u01a3\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\073\u01ab\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\015\161\035\u01ae\036\155\037\151\040\153" +
    "\041\152\045\160\047\144\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\003\052\004\066\005\063\006\033" +
    "\007\035\010\040\011\047\013\103\021\046\023\072\024" +
    "\031\025\041\026\043\027\044\030\077\031\065\032\110" +
    "\033\057\064\062\065\054\066\060\067\053\071\112\075" +
    "\u01b2\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\003\052\004\066\005\063\006\033\007\035" +
    "\010\040\011\047\013\103\021\u0190\023\072\024\031\025" +
    "\041\026\043\027\044\031\u0192\032\u0191\033\057\054\u01b8" +
    "\064\062\065\054\066\060\067\053\071\u0193\072\u018f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\003\052\004\066\005\063\006\033\007\035\010\040\011" +
    "\047\013\103\021\u0190\023\072\024\031\025\041\026\043" +
    "\027\044\031\u0192\032\u0191\033\057\054\u01c2\064\062\065" +
    "\054\066\060\067\053\071\u0193\072\u018f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\056\u01cd\057" +
    "\341\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\003\052\004\066\005\063\006\033\007" +
    "\035\010\040\011\047\013\103\021\u0190\023\072\024\031" +
    "\025\041\026\043\027\044\031\u0192\032\u0191\033\057\054" +
    "\u01d0\064\062\065\054\066\060\067\053\071\u0193\072\u018f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\003\052\004\066\005\063\006\033\007\035\010\040" +
    "\011\047\013\103\021\u0190\023\072\024\031\025\041\026" +
    "\043\027\044\031\u0192\032\u0191\033\057\054\u01da\064\062" +
    "\065\054\066\060\067\053\071\u0193\072\u018f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\056\u01e0\057\341\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\073\u01e3" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\056\u01e8\057\341\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\003\052\004" +
    "\066\005\063\006\033\007\035\010\040\011\047\013\103" +
    "\021\u0190\023\072\024\031\025\041\026\043\027\044\031" +
    "\u0192\032\u0191\033\057\054\u01eb\064\062\065\054\066\060" +
    "\067\053\071\u0193\072\u018f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\003\052\004\066" +
    "\005\063\006\033\007\035\010\040\011\047\013\103\021" +
    "\u0190\023\072\024\031\025\041\026\043\027\044\031\u0192" +
    "\032\u0191\033\057\054\u01f0\064\062\065\054\066\060\067" +
    "\053\071\u0193\072\u018f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\u01f8" +
    "\001\001\000\004\051\u0215\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\051\u01fc\001\001\000\004\051\u0201" +
    "\001\001\000\004\044\u01fd\001\001\000\002\001\001\000" +
    "\004\051\u01ff\001\001\000\004\044\u0200\001\001\000\002" +
    "\001\001\000\004\044\u0202\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\062\u0206\001\001\000\002\001\001" +
    "\000\004\044\u020a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\063\u020e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\003\052" +
    "\004\066\005\063\006\033\007\035\010\040\011\047\013" +
    "\103\021\046\023\072\024\031\025\041\026\043\027\044" +
    "\030\077\031\065\032\110\033\057\064\062\065\054\066" +
    "\060\067\053\071\112\075\u0213\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\u0216\001" +
    "\001\000\002\001\001\000\004\044\u0218\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\062\u021b\001\001\000" +
    "\004\044\u021c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\u0221\001" +
    "\001\000\004\044\u0222\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\003\052\004\066\005\063\006\033\007" +
    "\035\010\040\011\047\013\103\021\046\023\072\024\031" +
    "\025\041\026\043\027\044\030\077\031\065\032\110\033" +
    "\057\064\062\065\054\066\060\067\053\071\112\075\u0226" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\072" +
    "\003\052\004\066\005\063\006\033\007\035\010\040\011" +
    "\047\013\034\021\046\023\072\024\031\025\041\026\043" +
    "\027\044\030\025\031\065\032\056\033\057\052\071\053" +
    "\064\055\u0232\060\037\064\062\065\054\066\060\067\053" +
    "\071\074\074\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\u0238\001\001\000\002" +
    "\001\001\000\004\043\u023b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\u023f\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoParserJava$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoParserJava$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoParserJava$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public SintacticoParserJava(parteLexicaJava lexico) {
        super(lexico);
    }
    //1

    //2
    private ArrayList<Metodos> metodos=new ArrayList<Metodos>();
    private ArrayList<Parametros> parametros=new ArrayList<>();
    private ArrayList<Variables> variables=new ArrayList<>();
    private ArrayList<Variables> variablesClases=new ArrayList<>();
    private ArrayList<Clases> clases=new ArrayList<>();
    public ArrayList<Metodos> getMetodos(){
        return metodos;
    }
    public ArrayList<Variables> getVariables(){
        return variables;
    }
    public ArrayList<Clases> getClases(){
        return clases;
    }
     private ArrayList<String> errorSintactico=new ArrayList<>();
    public ArrayList<String> getErrorSintactico(){
        return errorSintactico;
    }
    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }
    
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        errorSintactico.add((cur_token.value)+(cur_token.left)+(cur_token.right)+"Sintactico"+"Se esperaba 'una clase bien hecha de java'");

    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == sym.EOF) {
            System.out.println("public void unrecoveredsyntax_error");
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoParserJava$actions {
  private final SintacticoParserJava parser;

  /** Constructor */
  CUP$SintacticoParserJava$actions(SintacticoParserJava parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoParserJava$do_action_part00000000(
    int                        CUP$SintacticoParserJava$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoParserJava$parser,
    java.util.Stack            CUP$SintacticoParserJava$stack,
    int                        CUP$SintacticoParserJava$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoParserJava$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoParserJava$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // s ::= importando 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoParserJava$parser.done_parsing();
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s ::= importando s 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // s ::= seleccion_inicios 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // s ::= error s 
            {
              String RESULT =null;
		 System.out.println("error "); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // seleccion_inicios ::= definir_clase 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("seleccion_inicios",38, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // seleccion_inicios ::= definir_clase seleccion_inicios 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("seleccion_inicios",38, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // contenedor_clase ::= seleccion_variables 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("contenedor_clase",43, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // contenedor_clase ::= seleccion_variables contenedor_clase 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("contenedor_clase",43, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // contenedor_clase ::= condicional_if 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("contenedor_clase",43, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // contenedor_clase ::= condicional_if contenedor_clase 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("contenedor_clase",43, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // contenedor_clase ::= definir_void 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("contenedor_clase",43, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // contenedor_clase ::= definir_void contenedor_clase 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("contenedor_clase",43, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // contenedor_clase ::= definir_constructor 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("contenedor_clase",43, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // contenedor_clase ::= definir_constructor contenedor_clase 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("contenedor_clase",43, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // contenedor_clase ::= definir_metodo_variable 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("contenedor_clase",43, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // contenedor_clase ::= definir_metodo_variable contenedor_clase 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("contenedor_clase",43, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // contenedor_clase ::= creacion_ciclos 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("contenedor_clase",43, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // contenedor_clase ::= creacion_ciclos contenedor_clase 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("contenedor_clase",43, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // contenedor_void ::= metodo_variables 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("contenedor_void",42, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // contenedor_void ::= metodo_variables contenedor_void 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("contenedor_void",42, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // contenedor_void ::= condicional_if 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("contenedor_void",42, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // contenedor_void ::= condicional_if contenedor_void 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("contenedor_void",42, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // contenedor_void ::= creacion_ciclos 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("contenedor_void",42, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // contenedor_void ::= creacion_ciclos contenedor_void 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("contenedor_void",42, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // visibilidad ::= PUBLIC 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("visibilidad",9, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // visibilidad ::= PRIVATE 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("visibilidad",9, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // visibilidad ::= PROTECTED 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("visibilidad",9, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // visibilidad ::= FINAL 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("visibilidad",9, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // definir_clase ::= visibilidad CLASE PALABRA LLAVE_A contenedor_clase LLAVE_C 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).value;
		 clases.add(new Clases(palabra,metodos,variablesClases)); variablesClases= new ArrayList<>(); metodos= new ArrayList<>(); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("definir_clase",36, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // definir_clase ::= CLASE PALABRA LLAVE_A contenedor_clase LLAVE_C 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).value;
		 clases.add(new Clases(palabra,metodos,variablesClases)); variablesClases= new ArrayList<>(); metodos= new ArrayList<>(); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("definir_clase",36, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // contenedor_constructor ::= THIS PUNTO PALABRA IGUAL PALABRA PUNTO_COMA 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("contenedor_constructor",57, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // contenedor_constructor ::= THIS PUNTO PALABRA IGUAL PALABRA PUNTO_COMA contenedor_constructor 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("contenedor_constructor",57, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // definir_constructor ::= visibilidad PALABRA PARENTESIS_A seleccionar_parametros PARENTESIS_C LLAVE_A contenedor_constructor LLAVE_C 
            {
              String RESULT =null;
		int nombreVoidleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-6)).left;
		int nombreVoidright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-6)).right;
		String nombreVoid = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-6)).value;
		 metodos.add(new Metodos(nombreVoid,"constructor",parametros,variables));parametros= new ArrayList<>();variables= new ArrayList<>();  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("definir_constructor",58, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // definir_constructor ::= visibilidad PALABRA PARENTESIS_A seleccionar_parametros PARENTESIS_C LLAVE_A LLAVE_C 
            {
              String RESULT =null;
		int nombreVoidleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)).left;
		int nombreVoidright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)).right;
		String nombreVoid = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)).value;
		 metodos.add(new Metodos(nombreVoid,"constructor",parametros,variables));parametros= new ArrayList<>();variables= new ArrayList<>();  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("definir_constructor",58, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // definir_constructor ::= PALABRA PARENTESIS_A seleccionar_parametros PARENTESIS_C LLAVE_A LLAVE_C 
            {
              String RESULT =null;
		int nombreVoidleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)).left;
		int nombreVoidright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)).right;
		String nombreVoid = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)).value;
		 metodos.add(new Metodos(nombreVoid,"constructor",parametros,variables));parametros= new ArrayList<>();variables= new ArrayList<>();  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("definir_constructor",58, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // definir_constructor ::= PALABRA PARENTESIS_A seleccionar_parametros PARENTESIS_C LLAVE_A contenedor_constructor LLAVE_C 
            {
              String RESULT =null;
		int nombreVoidleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-6)).left;
		int nombreVoidright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-6)).right;
		String nombreVoid = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-6)).value;
		metodos.add(new Metodos(nombreVoid,"constructor",parametros,variables));parametros= new ArrayList<>(); variables= new ArrayList<>();  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("definir_constructor",58, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // definir_void ::= visibilidad VOID PALABRA PARENTESIS_A seleccionar_parametros PARENTESIS_C LLAVE_A contenedor_void LLAVE_C 
            {
              String RESULT =null;
		int nombreVoidleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-6)).left;
		int nombreVoidright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-6)).right;
		String nombreVoid = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-6)).value;
		 metodos.add(new Metodos(nombreVoid,"void",parametros,variables));parametros= new ArrayList<>();variables= new ArrayList<>();  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("definir_void",40, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // definir_void ::= visibilidad VOID PALABRA PARENTESIS_A seleccionar_parametros PARENTESIS_C LLAVE_A LLAVE_C 
            {
              String RESULT =null;
		int nombreVoidleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)).left;
		int nombreVoidright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)).right;
		String nombreVoid = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)).value;
		 metodos.add(new Metodos(nombreVoid,"void",parametros,variables));parametros= new ArrayList<>();variables= new ArrayList<>();  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("definir_void",40, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // definir_void ::= VOID PALABRA PARENTESIS_A seleccionar_parametros PARENTESIS_C LLAVE_A LLAVE_C 
            {
              String RESULT =null;
		int nombreVoidleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)).left;
		int nombreVoidright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)).right;
		String nombreVoid = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)).value;
		 metodos.add(new Metodos(nombreVoid,"void",parametros,variables));parametros= new ArrayList<>();variables= new ArrayList<>();  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("definir_void",40, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // definir_void ::= VOID PALABRA PARENTESIS_A seleccionar_parametros PARENTESIS_C LLAVE_A contenedor_void LLAVE_C 
            {
              String RESULT =null;
		int nombreVoidleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-6)).left;
		int nombreVoidright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-6)).right;
		String nombreVoid = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-6)).value;
		metodos.add(new Metodos(nombreVoid,"void",parametros,variables));parametros= new ArrayList<>(); variables= new ArrayList<>();  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("definir_void",40, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // definir_void ::= visibilidad VOID PALABRA PARENTESIS_A PARENTESIS_C LLAVE_A contenedor_void LLAVE_C 
            {
              String RESULT =null;
		int nombreVoidleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)).left;
		int nombreVoidright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)).right;
		String nombreVoid = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)).value;
		 metodos.add(new Metodos(nombreVoid,"void",parametros,variables));parametros= new ArrayList<>(); variables= new ArrayList<>();  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("definir_void",40, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // definir_void ::= VOID PALABRA PARENTESIS_A PARENTESIS_C LLAVE_A contenedor_void LLAVE_C 
            {
              String RESULT =null;
		int nombreVoidleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)).left;
		int nombreVoidright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)).right;
		String nombreVoid = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)).value;
		 metodos.add(new Metodos(nombreVoid,"void",parametros,variables));parametros= new ArrayList<>(); variables= new ArrayList<>();  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("definir_void",40, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // seleccionar_parametros ::= tipo_variable PALABRA 
            {
              String RESULT =null;
		int tipoVariableleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)).left;
		int tipoVariableright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)).right;
		String tipoVariable = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)).value;
		int nombreVariableleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()).left;
		int nombreVariableright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()).right;
		String nombreVariable = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.peek()).value;
		parametros.add(new Parametros(tipoVariable,nombreVariable));
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("seleccionar_parametros",44, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // seleccionar_parametros ::= tipo_variable PALABRA COMA seleccionar_parametros 
            {
              String RESULT =null;
		int tipoVariableleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).left;
		int tipoVariableright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).right;
		String tipoVariable = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).value;
		int nombreVariableleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)).left;
		int nombreVariableright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)).right;
		String nombreVariable = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)).value;
		parametros.add(new Parametros(tipoVariable,nombreVariable)); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("seleccionar_parametros",44, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // definir_metodo_variable ::= visibilidad tipo_variable_metodo seleccionar_parametros PARENTESIS_C LLAVE_A contenedor_void RETURN PALABRA PUNTO_COMA LLAVE_C 
            {
              String RESULT =null;
		int tipoNombreVarleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-8)).left;
		int tipoNombreVarright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-8)).right;
		String tipoNombreVar = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-8)).value;
		 String[] separar = tipoNombreVar.split(","); String tipo= separar[0]; String nombre = separar[1];
                                                                                                                                  metodos.add(new Metodos(nombre,tipo,parametros,variables));parametros= new ArrayList<>(); variables= new ArrayList<>(); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("definir_metodo_variable",41, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // definir_metodo_variable ::= tipo_variable_metodo seleccionar_parametros PARENTESIS_C LLAVE_A contenedor_void RETURN PALABRA PUNTO_COMA LLAVE_C 
            {
              String RESULT =null;
		int tipoNombreVarleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-8)).left;
		int tipoNombreVarright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-8)).right;
		String tipoNombreVar = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-8)).value;
		 String[] separar = tipoNombreVar.split(","); String tipo= separar[0]; String nombre = separar[1];;
                                                                                                                                  metodos.add(new Metodos(nombre,tipo,parametros,variables));parametros= new ArrayList<>(); variables= new ArrayList<>(); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("definir_metodo_variable",41, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // definir_metodo_variable ::= visibilidad tipo_variable_metodo seleccionar_parametros PARENTESIS_C LLAVE_A RETURN PALABRA PUNTO_COMA LLAVE_C 
            {
              String RESULT =null;
		int tipoNombreVarleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-7)).left;
		int tipoNombreVarright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-7)).right;
		String tipoNombreVar = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-7)).value;
		 String[] separar = tipoNombreVar.split(","); String tipo= separar[0]; String nombre = separar[1];
                                                                                                                                 metodos.add(new Metodos(nombre,tipo,parametros,variables));parametros= new ArrayList<>(); variables= new ArrayList<>(); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("definir_metodo_variable",41, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // definir_metodo_variable ::= tipo_variable_metodo seleccionar_parametros PARENTESIS_C LLAVE_A RETURN PALABRA PUNTO_COMA LLAVE_C 
            {
              String RESULT =null;
		int tipoNombreVarleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-7)).left;
		int tipoNombreVarright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-7)).right;
		String tipoNombreVar = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-7)).value;
		 String[] separar = tipoNombreVar.split(","); String tipo= separar[0]; String nombre = separar[1];
                                                                                                                                  metodos.add(new Metodos(nombre,tipo,parametros,variables));parametros= new ArrayList<>(); variables= new ArrayList<>(); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("definir_metodo_variable",41, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // definir_metodo_variable ::= visibilidad tipo_variable_metodo PARENTESIS_C LLAVE_A contenedor_void RETURN PALABRA PUNTO_COMA LLAVE_C 
            {
              String RESULT =null;
		int tipoNombreVarleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-7)).left;
		int tipoNombreVarright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-7)).right;
		String tipoNombreVar = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-7)).value;
		 String[] separar = tipoNombreVar.split(","); String tipo= separar[0]; String nombre = separar[1];
                                                                                                                                  metodos.add(new Metodos(nombre,tipo,parametros,variables));parametros= new ArrayList<>(); variables= new ArrayList<>(); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("definir_metodo_variable",41, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // definir_metodo_variable ::= tipo_variable_metodo PARENTESIS_C LLAVE_A contenedor_void RETURN PALABRA PUNTO_COMA LLAVE_C 
            {
              String RESULT =null;
		int tipoNombreVarleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-7)).left;
		int tipoNombreVarright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-7)).right;
		String tipoNombreVar = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-7)).value;
		 String[] separar = tipoNombreVar.split(","); String tipo= separar[0]; String nombre = separar[1];
                                                                                                                                  metodos.add(new Metodos(nombre,tipo,parametros,variables));parametros= new ArrayList<>(); variables= new ArrayList<>(); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("definir_metodo_variable",41, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipo_variable_metodo ::= ENTERO PALABRA PARENTESIS_A 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)).value;
		String temp = "int,"+palabra; RESULT = temp; 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("tipo_variable_metodo",46, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipo_variable_metodo ::= BOOLEANO PALABRA PARENTESIS_A 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)).value;
		String temp = "boolean,"+palabra; RESULT = temp; 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("tipo_variable_metodo",46, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipo_variable_metodo ::= CADENA PALABRA PARENTESIS_A 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)).value;
		String temp = "String,"+palabra; RESULT = temp; 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("tipo_variable_metodo",46, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipo_variable_metodo ::= CARACTER PALABRA PARENTESIS_A 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)).value;
		String temp = "char,"+palabra; RESULT = temp; 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("tipo_variable_metodo",46, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tipo_variable_metodo ::= DOUBLE PALABRA PARENTESIS_A 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)).value;
		String temp = "double,"+palabra; RESULT = temp; 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("tipo_variable_metodo",46, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tipo_variable ::= ENTERO 
            {
              String RESULT =null;
		RESULT = "int"; 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("tipo_variable",45, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // tipo_variable ::= BOOLEANO 
            {
              String RESULT =null;
		RESULT = "boolean"; 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("tipo_variable",45, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // tipo_variable ::= CADENA 
            {
              String RESULT =null;
		RESULT = "String"; 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("tipo_variable",45, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // tipo_variable ::= CARACTER 
            {
              String RESULT =null;
		RESULT = "char"; 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("tipo_variable",45, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // tipo_variable ::= DOUBLE 
            {
              String RESULT =null;
		RESULT = "double"; 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("tipo_variable",45, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // condicional_if ::= realizar_if 
            {
              String RESULT =null;
		 System.out.println("condicional if");  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("condicional_if",24, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // condicional_if ::= realizar_if realizar_else 
            {
              String RESULT =null;
		 System.out.println("condicional if else"); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("condicional_if",24, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // condicional_if ::= condicional_switch 
            {
              String RESULT =null;
		 System.out.println("condicional switch"); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("condicional_if",24, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // contenedor_internos ::= seleccion_variables 
            {
              String RESULT =null;
		 System.out.println("var");  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("contenedor_internos",59, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // contenedor_internos ::= seleccion_variables contenedor_internos 
            {
              String RESULT =null;
		 System.out.println("var");  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("contenedor_internos",59, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // contenedor_internos ::= condicional_if 
            {
              String RESULT =null;
		 System.out.println("condicional if else"); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("contenedor_internos",59, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // contenedor_internos ::= condicional_if contenedor_internos 
            {
              String RESULT =null;
		 System.out.println("condicional switch"); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("contenedor_internos",59, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // contenedor_internos ::= creacion_ciclos 
            {
              String RESULT =null;
		 System.out.println("ciclo"); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("contenedor_internos",59, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // contenedor_internos ::= creacion_ciclos contenedor_internos 
            {
              String RESULT =null;
		 System.out.println("ciclo"); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("contenedor_internos",59, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // realizar_if ::= IF PARENTESIS_A operadores_condicional PARENTESIS_C LLAVE_A contenedor_internos LLAVE_C 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("realizar_if",25, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // realizar_if ::= IF PARENTESIS_A operadores_condicional PARENTESIS_C LLAVE_A LLAVE_C 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("realizar_if",25, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // realizar_else ::= ELSE LLAVE_A contenedor_internos LLAVE_C 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("realizar_else",26, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // realizar_else ::= ELSE LLAVE_A LLAVE_C 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("realizar_else",26, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operadores_condicional ::= variables_comparadores 
            {
              String RESULT =null;
		   
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("operadores_condicional",27, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operadores_condicional ::= variables_comparadores OR operadores_condicional 
            {
              String RESULT =null;
		   
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("operadores_condicional",27, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operadores_condicional ::= variables_comparadores AND operadores_condicional 
            {
              String RESULT =null;
		   
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("operadores_condicional",27, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operadores_condicional ::= booleano_comparadores 
            {
              String RESULT =null;
		   
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("operadores_condicional",27, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operadores_condicional ::= booleano_comparadores OR operadores_condicional 
            {
              String RESULT =null;
		   
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("operadores_condicional",27, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operadores_condicional ::= booleano_comparadores AND operadores_condicional 
            {
              String RESULT =null;
		   
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("operadores_condicional",27, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // variables_comparadores ::= selector_var_d MENOR_QUE selector_var_d 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("variables_comparadores",28, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // variables_comparadores ::= selector_var_d MAYOR_QUE selector_var_d 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("variables_comparadores",28, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // variables_comparadores ::= operaciones_aritmeticas_decimal IGUAL_A operaciones_aritmeticas_decimal 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("variables_comparadores",28, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // variables_comparadores ::= operaciones_aritmeticas_decimal DISTINTO_A operaciones_aritmeticas_decimal 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("variables_comparadores",28, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // variables_comparadores ::= operaciones_aritmeticas_decimal IGUAL_A PALABRA 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("variables_comparadores",28, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // variables_comparadores ::= operaciones_aritmeticas_decimal DISTINTO_A PALABRA 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("variables_comparadores",28, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // variables_comparadores ::= COMILLAS_TEXTO IGUAL_A PALABRA 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("variables_comparadores",28, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // variables_comparadores ::= COMILLAS_TEXTO DISTINTO_A PALABRA 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("variables_comparadores",28, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // variables_comparadores ::= COMILLA_LETRA IGUAL_A PALABRA 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("variables_comparadores",28, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // variables_comparadores ::= COMILLA_LETRA DISTINTO_A PALABRA 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("variables_comparadores",28, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // variables_comparadores ::= selector_var_d MENOR_IGUAL selector_var_d 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("variables_comparadores",28, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // variables_comparadores ::= selector_var_d MAYOR_IGUAL selector_var_d 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("variables_comparadores",28, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // selector_var_d ::= operaciones_aritmeticas_decimal 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("selector_var_d",29, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // selector_var_d ::= PALABRA 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("selector_var_d",29, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // booleano_comparadores ::= selector_var_b 
            {
              String RESULT =null;
		   
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("booleano_comparadores",31, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // booleano_comparadores ::= selector_var_b IGUAL_A selector_boleano_texto 
            {
              String RESULT =null;
		   
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("booleano_comparadores",31, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // booleano_comparadores ::= selector_var_b DISTINTO_A selector_boleano_texto 
            {
              String RESULT =null;
		   
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("booleano_comparadores",31, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // booleano_comparadores ::= selector_var_b IGUAL_A NOT seleccion_booleano 
            {
              String RESULT =null;
		   
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("booleano_comparadores",31, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // booleano_comparadores ::= selector_var_b DISTINTO_A NOT seleccion_booleano 
            {
              String RESULT =null;
		   
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("booleano_comparadores",31, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // booleano_comparadores ::= NOT selector_var_b 
            {
              String RESULT =null;
		   
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("booleano_comparadores",31, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // booleano_comparadores ::= NOT selector_var_b IGUAL_A selector_var_b 
            {
              String RESULT =null;
		   
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("booleano_comparadores",31, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // booleano_comparadores ::= NOT selector_var_b DISTINTO_A selector_var_b 
            {
              String RESULT =null;
		   
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("booleano_comparadores",31, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // booleano_comparadores ::= NOT selector_var_b IGUAL_A NOT selector_var_b 
            {
              String RESULT =null;
		   
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("booleano_comparadores",31, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // booleano_comparadores ::= NOT selector_var_b DISTINTO_A NOT selector_var_b 
            {
              String RESULT =null;
		   
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("booleano_comparadores",31, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // selector_var_b ::= PALABRA 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("selector_var_b",30, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // selector_var_b ::= seleccion_booleano 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("selector_var_b",30, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // selector_boleano_texto ::= COMILLAS_TEXTO 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("selector_boleano_texto",47, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // selector_boleano_texto ::= COMILLA_LETRA 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("selector_boleano_texto",47, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // selector_boleano_texto ::= seleccion_booleano 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("selector_boleano_texto",47, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // metodo_variables ::= repetir_variables 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("metodo_variables",56, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // metodo_variables ::= asignar_variables 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("metodo_variables",56, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // seleccion_variables ::= repetir_variables 
            {
              String RESULT =null;
		  variablesClases.addAll(variables); variables= new ArrayList<>(); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("seleccion_variables",22, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // seleccion_variables ::= asignar_variables 
            {
              String RESULT =null;
		  variablesClases.addAll(variables); variables= new ArrayList<>(); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("seleccion_variables",22, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // asignar_variables ::= asignar_booleano 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("asignar_variables",15, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // asignar_variables ::= asignar_cadena 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("asignar_variables",15, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // asignar_variables ::= asignar_caracter 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("asignar_variables",15, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // asignar_variables ::= asignar_decimal 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("asignar_variables",15, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // asignar_variables ::= asignar_objeto 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("asignar_variables",15, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // asignar_booleano ::= PALABRA IGUAL seleccion_booleano PUNTO_COMA 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("asignar_booleano",17, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // asignar_cadena ::= PALABRA IGUAL COMILLAS_TEXTO PUNTO_COMA 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("asignar_cadena",18, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // asignar_caracter ::= PALABRA IGUAL COMILLA_LETRA PUNTO_COMA 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("asignar_caracter",19, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // asignar_decimal ::= PALABRA IGUAL operaciones_aritmeticas_decimal PUNTO_COMA 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("asignar_decimal",20, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // asignar_objeto ::= PALABRA IGUAL NEW OBJETO PARENTESIS_A PARENTESIS_C PUNTO_COMA 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("asignar_objeto",21, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // asignar_objeto ::= PALABRA IGUAL NEW PALABRA PARENTESIS_A seleccionar_parametros PARENTESIS_C PUNTO_COMA 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("asignar_objeto",21, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // asignar_objeto ::= PALABRA IGUAL PALABRA PUNTO_COMA 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("asignar_objeto",21, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // repetir_variables ::= visibilidad crear_variables 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("repetir_variables",23, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // repetir_variables ::= crear_variables 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("repetir_variables",23, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // crear_variables ::= variable_entero 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("crear_variables",1, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // crear_variables ::= variable_booleano 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("crear_variables",1, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // crear_variables ::= variable_cadena 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("crear_variables",1, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // crear_variables ::= variable_caracter 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("crear_variables",1, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // crear_variables ::= variable_decimal 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("crear_variables",1, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // crear_variables ::= variable_objeto 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("crear_variables",1, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // variable_entero ::= ENTERO PALABRA IGUAL operaciones_aritmeticas_decimal PUNTO_COMA 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).value;
		 variables.add(new Variables(palabra,"int")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("variable_entero",2, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // variable_entero ::= ENTERO PALABRA PUNTO_COMA 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)).value;
		 variables.add(new Variables(palabra,"int")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("variable_entero",2, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // variable_entero ::= ENTERO PALABRA COMA multiple_entero PUNTO_COMA 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).value;
		 variables.add(new Variables(palabra,"int")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("variable_entero",2, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // variable_entero ::= ENTERO PALABRA IGUAL operaciones_aritmeticas_decimal COMA multiple_entero PUNTO_COMA 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)).value;
		 variables.add(new Variables(palabra,"int")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("variable_entero",2, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // multiple_entero ::= PALABRA 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.peek()).value;
		 variables.add(new Variables(palabra,"int")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("multiple_entero",8, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // multiple_entero ::= PALABRA IGUAL operaciones_aritmeticas_decimal 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)).value;
		 variables.add(new Variables(palabra,"int")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("multiple_entero",8, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // multiple_entero ::= PALABRA COMA multiple_entero 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)).value;
		 variables.add(new Variables(palabra,"int")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("multiple_entero",8, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // multiple_entero ::= PALABRA IGUAL operaciones_aritmeticas_decimal COMA multiple_entero 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)).value;
		 variables.add(new Variables(palabra,"int")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("multiple_entero",8, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // variable_booleano ::= BOOLEANO PALABRA IGUAL seleccion_booleano PUNTO_COMA 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).value;
		 variables.add(new Variables(palabra,"boolean")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("variable_booleano",3, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // variable_booleano ::= BOOLEANO PALABRA PUNTO_COMA 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)).value;
		 variables.add(new Variables(palabra,"boolean")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("variable_booleano",3, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // variable_booleano ::= BOOLEANO PALABRA COMA multiple_booleano PUNTO_COMA 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).value;
		 variables.add(new Variables(palabra,"boolean")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("variable_booleano",3, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // variable_booleano ::= BOOLEANO PALABRA IGUAL seleccion_booleano COMA multiple_booleano PUNTO_COMA 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)).value;
		 variables.add(new Variables(palabra,"boolean")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("variable_booleano",3, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // multiple_booleano ::= PALABRA 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.peek()).value;
		 variables.add(new Variables(palabra,"boolean")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("multiple_booleano",10, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // multiple_booleano ::= PALABRA IGUAL seleccion_booleano 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)).value;
		 variables.add(new Variables(palabra,"boolean")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("multiple_booleano",10, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // multiple_booleano ::= PALABRA COMA multiple_booleano 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)).value;
		 variables.add(new Variables(palabra,"boolean")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("multiple_booleano",10, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // multiple_booleano ::= PALABRA IGUAL seleccion_booleano COMA multiple_booleano 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)).value;
		 variables.add(new Variables(palabra,"boolean")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("multiple_booleano",10, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // seleccion_booleano ::= TRUE 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("seleccion_booleano",11, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // seleccion_booleano ::= FALSE 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("seleccion_booleano",11, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // variable_cadena ::= CADENA PALABRA IGUAL COMILLAS_TEXTO PUNTO_COMA 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).value;
		 variables.add(new Variables(palabra,"String")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("variable_cadena",4, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // variable_cadena ::= CADENA PALABRA PUNTO_COMA 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)).value;
		 variables.add(new Variables(palabra,"String")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("variable_cadena",4, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // variable_cadena ::= CADENA PALABRA COMA multiple_cadena PUNTO_COMA 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).value;
		 variables.add(new Variables(palabra,"String")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("variable_cadena",4, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // variable_cadena ::= CADENA PALABRA IGUAL COMILLAS_TEXTO COMA multiple_cadena PUNTO_COMA 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)).value;
		 variables.add(new Variables(palabra,"String")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("variable_cadena",4, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // multiple_cadena ::= PALABRA 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.peek()).value;
		 variables.add(new Variables(palabra,"String")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("multiple_cadena",12, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // multiple_cadena ::= PALABRA IGUAL COMILLAS_TEXTO 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)).value;
		 variables.add(new Variables(palabra,"String")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("multiple_cadena",12, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // multiple_cadena ::= PALABRA COMA multiple_cadena 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)).value;
		 variables.add(new Variables(palabra,"String")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("multiple_cadena",12, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // multiple_cadena ::= PALABRA IGUAL COMILLAS_TEXTO COMA multiple_cadena 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)).value;
		 variables.add(new Variables(palabra,"String")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("multiple_cadena",12, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // variable_caracter ::= CARACTER PALABRA IGUAL COMILLA_LETRA PUNTO_COMA 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).value;
		 variables.add(new Variables(palabra,"char")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("variable_caracter",5, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // variable_caracter ::= CARACTER PALABRA PUNTO_COMA 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)).value;
		 variables.add(new Variables(palabra,"char")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("variable_caracter",5, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // variable_caracter ::= CARACTER PALABRA COMA multiple_caracter PUNTO_COMA 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).value;
		 variables.add(new Variables(palabra,"char")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("variable_caracter",5, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // variable_caracter ::= CARACTER PALABRA IGUAL COMILLA_LETRA COMA multiple_caracter PUNTO_COMA 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)).value;
		 variables.add(new Variables(palabra,"char")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("variable_caracter",5, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // multiple_caracter ::= PALABRA 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.peek()).value;
		 variables.add(new Variables(palabra,"char")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("multiple_caracter",13, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // multiple_caracter ::= PALABRA IGUAL COMILLA_LETRA 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)).value;
		 variables.add(new Variables(palabra,"char")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("multiple_caracter",13, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // multiple_caracter ::= PALABRA COMA multiple_caracter 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)).value;
		 variables.add(new Variables(palabra,"char")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("multiple_caracter",13, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // multiple_caracter ::= PALABRA IGUAL COMILLA_LETRA COMA multiple_caracter 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)).value;
		 variables.add(new Variables(palabra,"char")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("multiple_caracter",13, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // variable_decimal ::= DOUBLE PALABRA IGUAL operaciones_aritmeticas_decimal PUNTO_COMA 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).value;
		 variables.add(new Variables(palabra,"double")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("variable_decimal",6, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // variable_decimal ::= DOUBLE PALABRA PUNTO_COMA 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)).value;
		 variables.add(new Variables(palabra,"double")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("variable_decimal",6, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // variable_decimal ::= DOUBLE PALABRA COMA multiple_decimal PUNTO_COMA 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).value;
		 variables.add(new Variables(palabra,"double")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("variable_decimal",6, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // variable_decimal ::= DOUBLE PALABRA IGUAL operaciones_aritmeticas_decimal COMA multiple_decimal PUNTO_COMA 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)).value;
		 variables.add(new Variables(palabra,"double")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("variable_decimal",6, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // multiple_decimal ::= PALABRA 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.peek()).value;
		 variables.add(new Variables(palabra,"double")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("multiple_decimal",14, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // multiple_decimal ::= PALABRA IGUAL operaciones_aritmeticas_decimal 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)).value;
		 variables.add(new Variables(palabra,"double")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("multiple_decimal",14, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // multiple_decimal ::= PALABRA IGUAL operaciones_aritmeticas_decimal COMA multiple_decimal 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)).value;
		 variables.add(new Variables(palabra,"double")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("multiple_decimal",14, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // multiple_decimal ::= PALABRA COMA multiple_decimal 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)).value;
		 variables.add(new Variables(palabra,"double")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("multiple_decimal",14, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // variable_objeto ::= OBJETO PALABRA IGUAL NEW OBJETO PARENTESIS_A PARENTESIS_C PUNTO_COMA 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-6)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-6)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-6)).value;
		 variables.add(new Variables(palabra,"object")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("variable_objeto",7, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // variable_objeto ::= OBJETO PALABRA IGUAL NEW PALABRA PARENTESIS_A seleccionar_parametros PARENTESIS_C PUNTO_COMA 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-7)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-7)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-7)).value;
		 variables.add(new Variables(palabra,"object")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("variable_objeto",7, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // variable_objeto ::= OBJETO PALABRA IGUAL PALABRA PUNTO_COMA 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).value;
		 variables.add(new Variables(palabra,"object")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("variable_objeto",7, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // variable_objeto ::= OBJETO PALABRA PUNTO_COMA 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)).value;
		 variables.add(new Variables(palabra,"object")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("variable_objeto",7, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // variable_objeto ::= OBJETO PALABRA COMA multiple_objeto PUNTO_COMA 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)).value;
		 variables.add(new Variables(palabra,"object")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("variable_objeto",7, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // variable_objeto ::= OBJETO PALABRA IGUAL PALABRA COMA multiple_objeto PUNTO_COMA 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)).value;
		 variables.add(new Variables(palabra,"object")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("variable_objeto",7, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // variable_objeto ::= OBJETO PALABRA IGUAL NEW OBJETO PARENTESIS_A PARENTESIS_C COMA multiple_objeto PUNTO_COMA 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-8)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-8)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-8)).value;
		 variables.add(new Variables(palabra,"object")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("variable_objeto",7, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // variable_objeto ::= OBJETO PALABRA IGUAL NEW PALABRA PARENTESIS_A seleccionar_parametros PARENTESIS_C COMA multiple_objeto PUNTO_COMA 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-9)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-9)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-9)).value;
		 variables.add(new Variables(palabra,"object")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("variable_objeto",7, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // multiple_objeto ::= PALABRA 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.peek()).value;
		 variables.add(new Variables(palabra,"object")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("multiple_objeto",60, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // multiple_objeto ::= PALABRA IGUAL NEW OBJETO PARENTESIS_A PARENTESIS_C 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)).value;
		 variables.add(new Variables(palabra,"object")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("multiple_objeto",60, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // multiple_objeto ::= PALABRA IGUAL NEW OBJETO PARENTESIS_A PARENTESIS_C COMA multiple_objeto 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-7)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-7)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-7)).value;
		 variables.add(new Variables(palabra,"object")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("multiple_objeto",60, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // multiple_objeto ::= PALABRA IGUAL NEW PALABRA PARENTESIS_A seleccionar_parametros PARENTESIS_C 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-6)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-6)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-6)).value;
		 variables.add(new Variables(palabra,"object")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("multiple_objeto",60, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // multiple_objeto ::= PALABRA IGUAL NEW PALABRA PARENTESIS_A seleccionar_parametros PARENTESIS_C COMA multiple_objeto 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-8)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-8)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-8)).value;
		 variables.add(new Variables(palabra,"object")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("multiple_objeto",60, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // multiple_objeto ::= PALABRA IGUAL PALABRA 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)).value;
		 variables.add(new Variables(palabra,"object")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("multiple_objeto",60, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // multiple_objeto ::= PALABRA IGUAL PALABRA COMA multiple_objeto 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)).value;
		 variables.add(new Variables(palabra,"object")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("multiple_objeto",60, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // multiple_objeto ::= PALABRA COMA multiple_objeto 
            {
              String RESULT =null;
		int palabraleft = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)).left;
		int palabraright = ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)).right;
		String palabra = (String)((java_cup.runtime.Symbol) CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)).value;
		 variables.add(new Variables(palabra,"object")); 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("multiple_objeto",60, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // importando ::= IMPORTAR PALABRA PUNTO_COMA 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("importando",32, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // importando ::= IMPORTAR PALABRA repetir_importar PUNTO_COMA 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("importando",32, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // importando ::= IMPORTAR PALABRA PALABRA repetir_importar PUNTO_COMA 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("importando",32, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // repetir_importar ::= PUNTO PALABRA 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("repetir_importar",33, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // repetir_importar ::= PUNTO PALABRA repetir_importar 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("repetir_importar",33, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // repetir_importar ::= PUNTO ASTERISCO 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("repetir_importar",33, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // operaciones_aritmeticas_entero ::= PARENTESIS_A DIGITOS PARENTESIS_C 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas_entero",34, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // operaciones_aritmeticas_entero ::= PARENTESIS_A DIGITOS PARENTESIS_C elegir_operacion operaciones_aritmeticas_entero 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas_entero",34, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // operaciones_aritmeticas_entero ::= PARENTESIS_A DIGITOS elegir_operacion operaciones_aritmeticas_entero PARENTESIS_C 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas_entero",34, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // operaciones_aritmeticas_entero ::= PARENTESIS_A DIGITOS elegir_operacion operaciones_aritmeticas_entero PARENTESIS_C elegir_operacion operaciones_aritmeticas_entero 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas_entero",34, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // operaciones_aritmeticas_entero ::= DIGITOS 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas_entero",34, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // operaciones_aritmeticas_entero ::= DIGITOS elegir_operacion operaciones_aritmeticas_entero 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas_entero",34, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // operaciones_aritmeticas_decimal ::= PARENTESIS_A para_decimal PARENTESIS_C 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas_decimal",35, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // operaciones_aritmeticas_decimal ::= PARENTESIS_A para_decimal PARENTESIS_C elegir_operacion operaciones_aritmeticas_decimal 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas_decimal",35, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // operaciones_aritmeticas_decimal ::= PARENTESIS_A para_decimal elegir_operacion operaciones_aritmeticas_decimal PARENTESIS_C 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas_decimal",35, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // operaciones_aritmeticas_decimal ::= PARENTESIS_A para_decimal elegir_operacion operaciones_aritmeticas_decimal PARENTESIS_C elegir_operacion operaciones_aritmeticas_decimal 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas_decimal",35, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // operaciones_aritmeticas_decimal ::= para_decimal 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas_decimal",35, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // operaciones_aritmeticas_decimal ::= para_decimal elegir_operacion operaciones_aritmeticas_decimal 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas_decimal",35, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // elegir_operacion ::= MAS 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("elegir_operacion",39, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // elegir_operacion ::= MENOS 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("elegir_operacion",39, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // elegir_operacion ::= ASTERISCO 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("elegir_operacion",39, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // elegir_operacion ::= RESTO 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("elegir_operacion",39, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // elegir_operacion ::= DIAGONAL 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("elegir_operacion",39, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // para_decimal ::= DIGITOS PUNTO DIGITOS 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("para_decimal",37, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // para_decimal ::= DIGITOS 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("para_decimal",37, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // creacion_ciclos ::= ciclo_for 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("creacion_ciclos",55, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // creacion_ciclos ::= ciclo_while 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("creacion_ciclos",55, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // creacion_ciclos ::= ciclo_do_while 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("creacion_ciclos",55, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // eleccion_simbolos_mayor_menor ::= MENOR_QUE 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("eleccion_simbolos_mayor_menor",48, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // eleccion_simbolos_mayor_menor ::= MAYOR_QUE 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("eleccion_simbolos_mayor_menor",48, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // eleccion_simbolos_mayor_menor ::= MENOR_IGUAL 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("eleccion_simbolos_mayor_menor",48, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // eleccion_simbolos_mayor_menor ::= MAYOR_IGUAL 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("eleccion_simbolos_mayor_menor",48, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // eleccion_incremento_decremento ::= INCREMENTO 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("eleccion_incremento_decremento",49, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // eleccion_incremento_decremento ::= DECREMENTO 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("eleccion_incremento_decremento",49, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // ciclo_for ::= FOR PARENTESIS_A ENTERO PALABRA IGUAL operaciones_aritmeticas_entero PUNTO_COMA ENTERO eleccion_simbolos_mayor_menor operaciones_aritmeticas_entero PUNTO_COMA PALABRA eleccion_incremento_decremento PARENTESIS_C LLAVE_A LLAVE_C 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("ciclo_for",50, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-15)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // ciclo_for ::= FOR PARENTESIS_A PALABRA IGUAL operaciones_aritmeticas_entero PUNTO_COMA ENTERO eleccion_simbolos_mayor_menor operaciones_aritmeticas_entero PUNTO_COMA PALABRA IGUAL PALABRA elegir_operacion operaciones_aritmeticas_entero PARENTESIS_C LLAVE_A LLAVE_C 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("ciclo_for",50, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-17)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // ciclo_for ::= FOR PARENTESIS_A ENTERO PALABRA IGUAL operaciones_aritmeticas_entero PUNTO_COMA ENTERO eleccion_simbolos_mayor_menor operaciones_aritmeticas_entero PUNTO_COMA PALABRA eleccion_incremento_decremento PARENTESIS_C LLAVE_A contenedor_internos LLAVE_C 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("ciclo_for",50, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-16)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // ciclo_for ::= FOR PARENTESIS_A PALABRA IGUAL operaciones_aritmeticas_entero PUNTO_COMA ENTERO eleccion_simbolos_mayor_menor operaciones_aritmeticas_entero PUNTO_COMA PALABRA IGUAL PALABRA elegir_operacion operaciones_aritmeticas_entero PARENTESIS_C LLAVE_A contenedor_internos LLAVE_C 
            {
              String RESULT =null;
		  
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("ciclo_for",50, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-18)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // ciclo_while ::= WHILE PARENTESIS_A operadores_condicional PARENTESIS_C LLAVE_A LLAVE_C 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("ciclo_while",51, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // ciclo_while ::= WHILE PARENTESIS_A operadores_condicional PARENTESIS_C LLAVE_A contenedor_internos LLAVE_C 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("ciclo_while",51, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // ciclo_do_while ::= DO LLAVE_A LLAVE_C WHILE PARENTESIS_A operadores_condicional PARENTESIS_C PUNTO_COMA 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("ciclo_do_while",53, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // ciclo_do_while ::= DO LLAVE_A contenedor_internos LLAVE_C WHILE PARENTESIS_A operadores_condicional PARENTESIS_C PUNTO_COMA 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("ciclo_do_while",53, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // casos_switch ::= CASE COMILLA_LETRA DOS_PUNTOS BREAK PUNTO_COMA 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("casos_switch",54, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // casos_switch ::= CASE COMILLAS_TEXTO DOS_PUNTOS BREAK PUNTO_COMA 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("casos_switch",54, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // casos_switch ::= CASE DIGITOS DOS_PUNTOS BREAK PUNTO_COMA 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("casos_switch",54, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // casos_switch ::= CASE COMILLA_LETRA DOS_PUNTOS contenedor_internos BREAK PUNTO_COMA 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("casos_switch",54, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // casos_switch ::= CASE COMILLAS_TEXTO DOS_PUNTOS contenedor_internos BREAK PUNTO_COMA 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("casos_switch",54, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // casos_switch ::= CASE DIGITOS DOS_PUNTOS contenedor_internos BREAK PUNTO_COMA 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("casos_switch",54, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // condicional_switch ::= SWITCH PARENTESIS_A PALABRA PARENTESIS_C LLAVE_A casos_switch DEFAULT DOS_PUNTOS BREAK PUNTO_COMA LLAVE_C 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("condicional_switch",52, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // condicional_switch ::= SWITCH PARENTESIS_A PALABRA PARENTESIS_C LLAVE_A casos_switch LLAVE_C 
            {
              String RESULT =null;
		 
              CUP$SintacticoParserJava$result = parser.getSymbolFactory().newSymbol("condicional_switch",52, ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.elementAt(CUP$SintacticoParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoParserJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoParserJava$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoParserJava$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoParserJava$do_action(
    int                        CUP$SintacticoParserJava$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoParserJava$parser,
    java.util.Stack            CUP$SintacticoParserJava$stack,
    int                        CUP$SintacticoParserJava$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoParserJava$do_action_part00000000(
                               CUP$SintacticoParserJava$act_num,
                               CUP$SintacticoParserJava$parser,
                               CUP$SintacticoParserJava$stack,
                               CUP$SintacticoParserJava$top);
    }
}

}
